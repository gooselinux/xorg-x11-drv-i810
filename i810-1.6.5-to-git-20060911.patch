--- xorg-x11-drv-i810-1.6.5/xf86-video-i810-1.6.5/configure.ac.i810-git-20060911	2006-08-10 18:36:36.000000000 -0400
+++ xorg-x11-drv-i810-1.6.5/xf86-video-i810-1.6.5/configure.ac	2006-09-11 16:44:45.000000000 -0400
@@ -49,6 +49,9 @@
 AC_PROG_LIBTOOL
 AC_PROG_CC
 
+AC_CHECK_PROG(gen4asm, [intel-gen4asm], yes, no)
+AM_CONDITIONAL(HAVE_GEN4ASM, test x$gen4asm = xyes)
+
 AH_TOP([#include "xorg-server.h"])
 
 AC_ARG_WITH(xorg-module-dir,
--- xorg-x11-drv-i810-1.6.5/xf86-video-i810-1.6.5/src/i830_driver.c.i810-git-20060911	2006-08-09 18:42:24.000000000 -0400
+++ xorg-x11-drv-i810-1.6.5/xf86-video-i810-1.6.5/src/i830_driver.c	2006-09-11 16:44:45.000000000 -0400
@@ -2709,7 +2709,7 @@
    } 
 
    /* LVDS doesn't exist on these */
-   if (IS_I830(pI830) || IS_845G(pI830) || IS_I865G(pI830))
+   if (IS_I830(pI830) || IS_845G(pI830) || IS_I865G(pI830) || IS_I915G(pI830) || IS_I945G(pI830) || IS_I965G(pI830))
       singlepipe &= ~(PIPE_LFP | (PIPE_LFP<<8));
 
    if (pI830->availablePipes == 1) 
@@ -2852,12 +2852,14 @@
    DPRINTF(PFX, "GetDisplayInfo: device: 0x%x\n", device);
 
    switch (device & 0xff) {
-   case 0x01:
-   case 0x02:
-   case 0x04:
-   case 0x08:
-   case 0x10:
-   case 0x20:
+   case PIPE_CRT:
+   case PIPE_TV:
+   case PIPE_DFP:
+   case PIPE_LFP:
+   case PIPE_CRT2:
+   case PIPE_TV2:
+   case PIPE_DFP2:
+   case PIPE_LFP2:
       break;
    default:
       xf86DrvMsg(pScrn->scrnIndex, X_ERROR,
@@ -2964,10 +2966,6 @@
 	    name = DeviceToString(-1);
 	 } while (name);
 
-	 if (pipe & PIPE_UNKNOWN_ACTIVE)
-	    xf86DrvMsg(pScrn->scrnIndex, X_INFO,
-		       "\tSome unknown display devices may also be present\n");
-
       } else {
 	 xf86DrvMsg(pScrn->scrnIndex, X_INFO,
 		    "No active displays on Pipe %c.\n", PIPE_NAME(n));
@@ -3000,7 +2998,7 @@
       pipe = (pI830->operatingDevices >> PIPE_SHIFT(n)) & PIPE_ACTIVE_MASK;
       pI830->pipeDisplaySize[n].x1 = pI830->pipeDisplaySize[n].y1 = 0;
       pI830->pipeDisplaySize[n].x2 = pI830->pipeDisplaySize[n].y2 = 4096;
-      for (i = 0; i < NumKnownDisplayTypes; i++) {
+      for (i = 0; i < NumDisplayTypes; i++) {
          if (pipe & (1 << i) & PIPE_SIZED_DISP_MASK) {
 	    if (pI830->displaySize[i].x2 != 0) {
 	       xf86DrvMsg(pScrn->scrnIndex, X_INFO,
@@ -3037,7 +3035,7 @@
 		  "\t      If you encounter this problem please add \n"
 		  "\t\t Option \"DisplayInfo\" \"FALSE\"\n"
 		  "\t      to the Device section of your XF86Config file.\n");
-      for (i = 0; i < NumKnownDisplayTypes; i++) {
+      for (i = 0; i < NumDisplayTypes; i++) {
          if (GetDisplayInfo(pScrn, 1 << i, &pI830->displayAttached[i],
 			 &pI830->displayPresent[i],
 			 &pI830->displaySize[i].x2,
@@ -4398,7 +4396,7 @@
    /*
     * Let's setup the mobile systems to check the lid status
     */
-   if (IS_MOBILE(pI830)) {
+   if (IS_MOBILE(pI830) && !pI830->MergedFB) {
       pI830->checkDevices = TRUE;
 
       if (!xf86ReturnOptValBool(pI830->Options, OPTION_CHECKDEVICES, TRUE)) {
@@ -6920,6 +6918,7 @@
     BoxPtr FullBox
 ){
    ScrnInfoPtr pScrn = xf86Screens[pScreen->myNum];
+   I830Ptr pI830 = I830PTR(pScrn);
    RegionRec ScreenRegion;
    RegionRec FullRegion;
    BoxRec ScreenBox;
@@ -6928,7 +6927,7 @@
    ScreenBox.x1 = 0;
    ScreenBox.y1 = 0;
    ScreenBox.x2 = pScrn->displayWidth;
-   if (pScrn->virtualX > pScrn->virtualY)
+   if (!pI830->MergedFB && pScrn->virtualX > pScrn->virtualY)
       ScreenBox.y2 = pScrn->virtualX;
    else
       ScreenBox.y2 = pScrn->virtualY;
@@ -8079,13 +8078,15 @@
 
 #ifdef XF86DRI
    if (pI830->directRenderingEnabled) {
+
+      I830DRISetVBlankInterrupt (pScrn, TRUE);
+
       if (!pI830->starting) {
          ScreenPtr pScreen = pScrn->pScreen;
          drmI830Sarea *sarea = (drmI830Sarea *) DRIGetSAREAPrivate(pScreen);
          int i;
 
 	 I830DRIResume(screenInfo.screens[scrnIndex]);
-         I830DRISetVBlankInterrupt (pScrn, TRUE);
       
 	 I830RefreshRing(pScrn);
 	 I830Sync(pScrn);
--- xorg-x11-drv-i810-1.6.5/xf86-video-i810-1.6.5/src/i810_driver.c.i810-git-20060911	2006-08-10 16:40:39.000000000 -0400
+++ xorg-x11-drv-i810-1.6.5/xf86-video-i810-1.6.5/src/i810_driver.c	2006-09-11 16:44:45.000000000 -0400
@@ -333,6 +333,8 @@
    NULL
 };
 
+#endif /* I830_ONLY */
+
 const char *I810shadowSymbols[] = {
     "shadowInit",
     "shadowSetup",
@@ -340,8 +342,6 @@
     NULL
 };
 
-#endif /* I830_ONLY */
-
 #ifndef I810_DEBUG
 int I810_DEBUG = (0
 /*     		  | DEBUG_ALWAYS_SYNC  */
@@ -408,9 +408,9 @@
 #ifdef XF86DRI
 			I810drmSymbols,
 			I810driSymbols,
+#endif
 			I810shadowSymbols,
 			I810shadowFBSymbols,
-#endif
 			I810vbeSymbols, vbeOptionalSymbols,
 			I810ddcSymbols, I810int10Symbols, NULL);
 
--- xorg-x11-drv-i810-1.6.5/xf86-video-i810-1.6.5/src/wm_prog.h.i810-git-20060911	2006-08-08 18:51:25.000000000 -0400
+++ xorg-x11-drv-i810-1.6.5/xf86-video-i810-1.6.5/src/wm_prog.h	2006-09-11 16:44:45.000000000 -0400
@@ -1,166 +1,82 @@
-/* wm_program */
-/*    mov (1) g4<1>F g1.8<0,1,0>UW { align1 +  } */
    { 0x00000001, 0x2080013d, 0x00000028, 0x00000000 },
-/*    add (1) g4.4<1>F g1.8<0,1,0>UW 1 { align1 +  } */
    { 0x00000040, 0x20840d3d, 0x00000028, 0x00000001 },
-/*    mov (1) g4.8<1>F g1.8<0,1,0>UW { align1 +  } */
    { 0x00000001, 0x2088013d, 0x00000028, 0x00000000 },
-/*    add (1) g4.12<1>F g1.8<0,1,0>UW 1 { align1 +  } */
    { 0x00000040, 0x208c0d3d, 0x00000028, 0x00000001 },
-/*    mov (1) g6<1>F g1.10<0,1,0>UW { align1 +  } */
    { 0x00000001, 0x20c0013d, 0x0000002a, 0x00000000 },
-/*    mov (1) g6.4<1>F g1.10<0,1,0>UW { align1 +  } */
    { 0x00000001, 0x20c4013d, 0x0000002a, 0x00000000 },
-/*    add (1) g6.8<1>F g1.10<0,1,0>UW 1 { align1 +  } */
    { 0x00000040, 0x20c80d3d, 0x0000002a, 0x00000001 },
-/*    add (1) g6.12<1>F g1.10<0,1,0>UW 1 { align1 +  } */
    { 0x00000040, 0x20cc0d3d, 0x0000002a, 0x00000001 },
-/*    mov (1) g4.16<1>F g1.12<0,1,0>UW { align1 +  } */
    { 0x00000001, 0x2090013d, 0x0000002c, 0x00000000 },
-/*    add (1) g4.20<1>F g1.12<0,1,0>UW 1 { align1 +  } */
    { 0x00000040, 0x20940d3d, 0x0000002c, 0x00000001 },
-/*    mov (1) g4.24<1>F g1.12<0,1,0>UW { align1 +  } */
    { 0x00000001, 0x2098013d, 0x0000002c, 0x00000000 },
-/*    add (1) g4.28<1>F g1.12<0,1,0>UW 1 { align1 +  } */
    { 0x00000040, 0x209c0d3d, 0x0000002c, 0x00000001 },
-/*    mov (1) g6.16<1>F g1.14<0,1,0>UW { align1 +  } */
    { 0x00000001, 0x20d0013d, 0x0000002e, 0x00000000 },
-/*    mov (1) g6.20<1>F g1.14<0,1,0>UW { align1 +  } */
    { 0x00000001, 0x20d4013d, 0x0000002e, 0x00000000 },
-/*    add (1) g6.24<1>F g1.14<0,1,0>UW 1 { align1 +  } */
    { 0x00000040, 0x20d80d3d, 0x0000002e, 0x00000001 },
-/*    add (1) g6.28<1>F g1.14<0,1,0>UW 1 { align1 +  } */
    { 0x00000040, 0x20dc0d3d, 0x0000002e, 0x00000001 },
-/*    mov (1) g5<1>F g1.16<0,1,0>UW { align1 +  } */
    { 0x00000001, 0x20a0013d, 0x00000030, 0x00000000 },
-/*    add (1) g5.4<1>F g1.16<0,1,0>UW 1 { align1 +  } */
    { 0x00000040, 0x20a40d3d, 0x00000030, 0x00000001 },
-/*    mov (1) g5.8<1>F g1.16<0,1,0>UW { align1 +  } */
    { 0x00000001, 0x20a8013d, 0x00000030, 0x00000000 },
-/*    add (1) g5.12<1>F g1.16<0,1,0>UW 1 { align1 +  } */
    { 0x00000040, 0x20ac0d3d, 0x00000030, 0x00000001 },
-/*    mov (1) g7<1>F g1.18<0,1,0>UW { align1 +  } */
    { 0x00000001, 0x20e0013d, 0x00000032, 0x00000000 },
-/*    mov (1) g7.4<1>F g1.18<0,1,0>UW { align1 +  } */
    { 0x00000001, 0x20e4013d, 0x00000032, 0x00000000 },
-/*    add (1) g7.8<1>F g1.18<0,1,0>UW 1 { align1 +  } */
    { 0x00000040, 0x20e80d3d, 0x00000032, 0x00000001 },
-/*    add (1) g7.12<1>F g1.18<0,1,0>UW 1 { align1 +  } */
    { 0x00000040, 0x20ec0d3d, 0x00000032, 0x00000001 },
-/*    mov (1) g5.16<1>F g1.20<0,1,0>UW { align1 +  } */
    { 0x00000001, 0x20b0013d, 0x00000034, 0x00000000 },
-/*    add (1) g5.20<1>F g1.20<0,1,0>UW 1 { align1 +  } */
    { 0x00000040, 0x20b40d3d, 0x00000034, 0x00000001 },
-/*    mov (1) g5.24<1>F g1.20<0,1,0>UW { align1 +  } */
    { 0x00000001, 0x20b8013d, 0x00000034, 0x00000000 },
-/*    add (1) g5.28<1>F g1.20<0,1,0>UW 1 { align1 +  } */
    { 0x00000040, 0x20bc0d3d, 0x00000034, 0x00000001 },
-/*    mov (1) g7.16<1>F g1.22<0,1,0>UW { align1 +  } */
    { 0x00000001, 0x20f0013d, 0x00000036, 0x00000000 },
-/*    mov (1) g7.20<1>F g1.22<0,1,0>UW { align1 +  } */
    { 0x00000001, 0x20f4013d, 0x00000036, 0x00000000 },
-/*    add (1) g7.24<1>F g1.22<0,1,0>UW 1 { align1 +  } */
    { 0x00000040, 0x20f80d3d, 0x00000036, 0x00000001 },
-/*    add (1) g7.28<1>F g1.22<0,1,0>UW 1 { align1 +  } */
    { 0x00000040, 0x20fc0d3d, 0x00000036, 0x00000001 },
-/*    add (8) g4<1>F g4<8,8,1>F g1<0,1,0>F { align1 +  } */
    { 0x00600040, 0x208077bd, 0x008d0080, 0x00004020 },
-/*    add (8) g5<1>F g5<8,8,1>F g1<0,1,0>F { align1 +  } */
    { 0x00600040, 0x20a077bd, 0x008d00a0, 0x00004020 },
-/*    mul (8) g4<1>F g4<8,8,1>F g3<0,1,0>F { align1 +  } */
    { 0x00600041, 0x208077bd, 0x008d0080, 0x00000060 },
-/*    mul (8) g5<1>F g5<8,8,1>F g3<0,1,0>F { align1 +  } */
    { 0x00600041, 0x20a077bd, 0x008d00a0, 0x00000060 },
-/*    add (8) g4<1>F g4<8,8,1>F g3.12<0,1,0>F { align1 +  } */
    { 0x00600040, 0x208077bd, 0x008d0080, 0x0000006c },
-/*    add (8) g5<1>F g5<8,8,1>F g3.12<0,1,0>F { align1 +  } */
    { 0x00600040, 0x20a077bd, 0x008d00a0, 0x0000006c },
-/*    add (8) g6<1>F g6<8,8,1>F g1.4<0,1,0>F { align1 +  } */
    { 0x00600040, 0x20c077bd, 0x008d00c0, 0x00004024 },
-/*    add (8) g7<1>F g7<8,8,1>F g1.4<0,1,0>F { align1 +  } */
    { 0x00600040, 0x20e077bd, 0x008d00e0, 0x00004024 },
-/*    mul (8) g6<1>F g6<8,8,1>F g3.20<0,1,0>F { align1 +  } */
    { 0x00600041, 0x20c077bd, 0x008d00c0, 0x00000074 },
-/*    mul (8) g7<1>F g7<8,8,1>F g3.20<0,1,0>F { align1 +  } */
    { 0x00600041, 0x20e077bd, 0x008d00e0, 0x00000074 },
-/*    add (8) g6<1>F g6<8,8,1>F g3.28<0,1,0>F { align1 +  } */
    { 0x00600040, 0x20c077bd, 0x008d00c0, 0x0000007c },
-/*    add (8) g7<1>F g7<8,8,1>F g3.28<0,1,0>F { align1 +  } */
    { 0x00600040, 0x20e077bd, 0x008d00e0, 0x0000007c },
-/*    mov (8) m1<1>F g4<8,8,1>F { align1 +  } */
    { 0x00600001, 0x202003be, 0x008d0080, 0x00000000 },
-/*    mov (8) m2<1>F g5<8,8,1>F { align1 +  } */
    { 0x00600001, 0x204003be, 0x008d00a0, 0x00000000 },
-/*    mov (8) m3<1>F g6<8,8,1>F { align1 +  } */
    { 0x00600001, 0x206003be, 0x008d00c0, 0x00000000 },
-/*    mov (8) m4<1>F g7<8,8,1>F { align1 +  } */
    { 0x00600001, 0x208003be, 0x008d00e0, 0x00000000 },
-/*    send   0 (16) g12<1>UW g0<8,8,1>UW sampler mlen 5 rlen 8 { align1 +  } */
    { 0x00800031, 0x21801d29, 0x008d0000, 0x02580001 },
-/*    mov (8) g19<1>UW g19<8,8,1>UW { align1 +  } */
    { 0x00600001, 0x22600129, 0x008d0260, 0x00000000 },
-/*    add (8) g14<1>F g14<8,8,1>F -0.0627451{ align1 +  } */
    { 0x00600040, 0x21c07fbd, 0x008d01c0, 0xbd808081 },
-/*    add (8) g12<1>F g12<8,8,1>F -0.501961{ align1 +  } */
-   { 0x00600040, 0x21807fbd, 0x008d0180, 0xbf008081 },
-/*    add (8) g16<1>F g16<8,8,1>F -0.501961{ align1 +  } */
-   { 0x00600040, 0x22007fbd, 0x008d0200, 0xbf008081 },
-/*    mul (8) g14<1>F g14<8,8,1>F 1.164{ align1 +  } */
+   { 0x00600040, 0x21807fbd, 0x008d0180, 0xbf008084 },
+   { 0x00600040, 0x22007fbd, 0x008d0200, 0xbf008084 },
    { 0x00600041, 0x21c07fbd, 0x008d01c0, 0x3f94fdf4 },
-/*    mul (8) a0<1>F g12<8,8,1>F 1.596{ align1 +  } */
    { 0x00600041, 0x20007fbc, 0x008d0180, 0x3fcc49ba },
-/*    mac (8) m2<1>F g14<8,8,1>F 1{ align1 + Saturate  } */
    { 0x80600048, 0x20407fbe, 0x008d01c0, 0x3f800000 },
-/*    mul (8) a0<1>F g12<8,8,1>F -0.813{ align1 +  } */
    { 0x00600041, 0x20007fbc, 0x008d0180, 0xbf5020c5 },
-/*    mac (8) a0<1>F g16<8,8,1>F -0.392{ align1 +  } */
    { 0x00600048, 0x20007fbc, 0x008d0200, 0xbec8b439 },
-/*    mac (8) m3<1>F g14<8,8,1>F 1{ align1 + Saturate  } */
    { 0x80600048, 0x20607fbe, 0x008d01c0, 0x3f800000 },
-/*    mul (8) a0<1>F g16<8,8,1>F 2.017{ align1 +  } */
    { 0x00600041, 0x20007fbc, 0x008d0200, 0x40011687 },
-/*    mac (8) m4<1>F g14<8,8,1>F 1{ align1 + Saturate  } */
    { 0x80600048, 0x20807fbe, 0x008d01c0, 0x3f800000 },
-/*    add (8) g15<1>F g15<8,8,1>F -0.0627451{ align1 +  } */
    { 0x00600040, 0x21e07fbd, 0x008d01e0, 0xbd808081 },
-/*    add (8) g13<1>F g13<8,8,1>F -0.501961{ align1 +  } */
-   { 0x00600040, 0x21a07fbd, 0x008d01a0, 0xbf008081 },
-/*    add (8) g17<1>F g17<8,8,1>F -0.501961{ align1 +  } */
-   { 0x00600040, 0x22207fbd, 0x008d0220, 0xbf008081 },
-/*    mul (8) g15<1>F g15<8,8,1>F 1.164{ align1 +  } */
+   { 0x00600040, 0x21a07fbd, 0x008d01a0, 0xbf008084 },
+   { 0x00600040, 0x22207fbd, 0x008d0220, 0xbf008084 },
    { 0x00600041, 0x21e07fbd, 0x008d01e0, 0x3f94fdf4 },
-/*    mul (8) a0<1>F g13<8,8,1>F 1.596{ align1 +  } */
    { 0x00600041, 0x20007fbc, 0x008d01a0, 0x3fcc49ba },
-/*    mac (8) m6<1>F g15<8,8,1>F 1{ align1 + Saturate  } */
    { 0x80600048, 0x20c07fbe, 0x008d01e0, 0x3f800000 },
-/*    mul (8) a0<1>F g13<8,8,1>F -0.813{ align1 +  } */
    { 0x00600041, 0x20007fbc, 0x008d01a0, 0xbf5020c5 },
-/*    mac (8) a0<1>F g17<8,8,1>F -0.392{ align1 +  } */
    { 0x00600048, 0x20007fbc, 0x008d0220, 0xbec8b439 },
-/*    mac (8) m7<1>F g15<8,8,1>F 1{ align1 + Saturate  } */
    { 0x80600048, 0x20e07fbe, 0x008d01e0, 0x3f800000 },
-/*    mul (8) a0<1>F g17<8,8,1>F 2.017{ align1 +  } */
    { 0x00600041, 0x20007fbc, 0x008d0220, 0x40011687 },
-/*    mac (8) m8<1>F g15<8,8,1>F 1{ align1 + Saturate  } */
    { 0x80600048, 0x21007fbe, 0x008d01e0, 0x3f800000 },
-/*    mov (8) m1<1>UD g1<8,8,1>UD { align1 mask_disable +  } */
    { 0x00600201, 0x20200022, 0x008d0020, 0x00000000 },
-/*    send   0 (16) a0<1>UW g0<8,8,1>UW write mlen 10 rlen 0 EOT{ align1 +  } */
-   { 0x00800031, 0x20001d28, 0x008d0000, 0x85a04800 },
-/*    nop (4) g0<1>UD { align1 +  } */
-   { 0x0040007e, 0x20000c21, 0x00690000, 0x00000000 },
-/*    nop (4) g0<1>UD { align1 +  } */
-   { 0x0040007e, 0x20000c21, 0x00690000, 0x00000000 },
-/*    nop (4) g0<1>UD { align1 +  } */
-   { 0x0040007e, 0x20000c21, 0x00690000, 0x00000000 },
-/*    nop (4) g0<1>UD { align1 +  } */
-   { 0x0040007e, 0x20000c21, 0x00690000, 0x00000000 },
-/*    nop (4) g0<1>UD { align1 +  } */
-   { 0x0040007e, 0x20000c21, 0x00690000, 0x00000000 },
-/*    nop (4) g0<1>UD { align1 +  } */
-   { 0x0040007e, 0x20000c21, 0x00690000, 0x00000000 },
-/*    nop (4) g0<1>UD { align1 +  } */
-   { 0x0040007e, 0x20000c21, 0x00690000, 0x00000000 },
-/*    nop (4) g0<1>UD { align1 +  } */
-   { 0x0040007e, 0x20000c21, 0x00690000, 0x00000000 },
-
+   { 0x00800031, 0x20001d3c, 0x008d0000, 0x85a04800 },
+   { 0x0000007e, 0x00000000, 0x00000000, 0x00000000 },
+   { 0x0000007e, 0x00000000, 0x00000000, 0x00000000 },
+   { 0x0000007e, 0x00000000, 0x00000000, 0x00000000 },
+   { 0x0000007e, 0x00000000, 0x00000000, 0x00000000 },
+   { 0x0000007e, 0x00000000, 0x00000000, 0x00000000 },
+   { 0x0000007e, 0x00000000, 0x00000000, 0x00000000 },
+   { 0x0000007e, 0x00000000, 0x00000000, 0x00000000 },
+   { 0x0000007e, 0x00000000, 0x00000000, 0x00000000 },
--- xorg-x11-drv-i810-1.6.5/xf86-video-i810-1.6.5/src/i830_accel.c.i810-git-20060911	2006-08-08 18:51:25.000000000 -0400
+++ xorg-x11-drv-i810-1.6.5/xf86-video-i810-1.6.5/src/i830_accel.c	2006-09-11 16:44:45.000000000 -0400
@@ -395,6 +395,7 @@
    return XAAInit(pScreen, infoPtr);
 }
 
+#ifdef XF86DRI
 static unsigned int
 CheckTiling(ScrnInfoPtr pScrn)
 {
@@ -416,6 +417,9 @@
 
    return tiled;
 }
+#else
+#define CheckTiling(pScrn) 0
+#endif
 
 void
 I830SetupForSolidFill(ScrnInfoPtr pScrn, int color, int rop,
--- /dev/null	2006-09-11 15:00:37.587577243 -0400
+++ xorg-x11-drv-i810-1.6.5/xf86-video-i810-1.6.5/src/sf_prog.h	2006-09-11 16:44:45.000000000 -0400
@@ -0,0 +1,17 @@
+   { 0x00000031, 0x20c01fbd, 0x0000002c, 0x01110081 },
+   { 0x00000031, 0x20c41fbd, 0x00000034, 0x01110081 },
+   { 0x00600040, 0x20e077bd, 0x008d0080, 0x008d4060 },
+   { 0x00000041, 0x20e077bd, 0x000000e0, 0x000000c0 },
+   { 0x00000041, 0x20e477bd, 0x000000e4, 0x000000c4 },
+   { 0x00600001, 0x202003be, 0x000000e0, 0x00000000 },
+   { 0x00600001, 0x204003be, 0x000000e4, 0x00000000 },
+   { 0x00600001, 0x206003be, 0x008d0060, 0x00000000 },
+   { 0x00600031, 0x20001fbc, 0x008d0000, 0x8640c800 },
+   { 0x0000007e, 0x00000000, 0x00000000, 0x00000000 },
+   { 0x0000007e, 0x00000000, 0x00000000, 0x00000000 },
+   { 0x0000007e, 0x00000000, 0x00000000, 0x00000000 },
+   { 0x0000007e, 0x00000000, 0x00000000, 0x00000000 },
+   { 0x0000007e, 0x00000000, 0x00000000, 0x00000000 },
+   { 0x0000007e, 0x00000000, 0x00000000, 0x00000000 },
+   { 0x0000007e, 0x00000000, 0x00000000, 0x00000000 },
+   { 0x0000007e, 0x00000000, 0x00000000, 0x00000000 },
--- xorg-x11-drv-i810-1.6.5/xf86-video-i810-1.6.5/src/Makefile.am.i810-git-20060911	2006-08-09 16:36:54.000000000 -0400
+++ xorg-x11-drv-i810-1.6.5/xf86-video-i810-1.6.5/src/Makefile.am	2006-09-11 16:44:45.000000000 -0400
@@ -33,6 +33,7 @@
 i810_drv_la_SOURCES = \
          brw_defines.h \
          brw_structs.h \
+	 sf_prog.h \
          wm_prog.h \
          common.h \
          i810_accel.c \
@@ -66,6 +67,13 @@
 	 i915_reg.h \
 	 i915_video.c
 
+if HAVE_GEN4ASM
+sf_prog.h: packed_yuv_sf.g4a
+	intel-gen4asm -o sf_prog.h packed_yuv_sf.g4a
+wm_prog.h: packed_yuv_wm.g4a
+	intel-gen4asm -o wm_prog.h packed_yuv_wm.g4a
+endif
+
 if DRI
 i810_drv_la_SOURCES += \
          i810_dri.c \
@@ -74,3 +82,7 @@
          i810_hwmc.c \
          i830_dri.h 
 endif
+
+EXTRA_DIST = \
+	packed_yuv_sf.g4a \
+	packed_yuv_wm.g4a
--- xorg-x11-drv-i810-1.6.5/xf86-video-i810-1.6.5/src/i830_video.c.i810-git-20060911	2006-08-09 18:44:50.000000000 -0400
+++ xorg-x11-drv-i810-1.6.5/xf86-video-i810-1.6.5/src/i830_video.c	2006-09-11 16:44:45.000000000 -0400
@@ -2128,40 +2128,7 @@
 #define SF_MAX_THREADS	   1
 
 static const CARD32 sf_kernel_static[][4] = {
-/*    send   0 (1) g6<1>F g1.12<0,1,0>F math mlen 1 rlen 1 { align1 +  } */
-   { 0x00000031, 0x20c01fbd, 0x0000002c, 0x01110081 },
-/*    send   0 (1) g6.4<1>F g1.20<0,1,0>F math mlen 1 rlen 1 { align1 +  } */
-   { 0x00000031, 0x20c41fbd, 0x00000034, 0x01110081 },
-/*    add (8) g7<1>F g4<8,8,1>F g3<8,8,1>F { align1 +  } */
-   { 0x00600040, 0x20e077bd, 0x008d0080, 0x008d4060 },
-/*    mul (1) g7<1>F g7<0,1,0>F g6<0,1,0>F { align1 +  } */
-   { 0x00000041, 0x20e077bd, 0x000000e0, 0x000000c0 },
-/*    mul (1) g7.4<1>F g7.4<0,1,0>F g6.4<0,1,0>F { align1 +  } */
-   { 0x00000041, 0x20e477bd, 0x000000e4, 0x000000c4 },
-/*    mov (8) m1<1>F g7<0,1,0>F { align1 +  } */
-   { 0x00600001, 0x202003be, 0x000000e0, 0x00000000 },
-/*    mov (8) m2<1>F g7.4<0,1,0>F { align1 +  } */
-   { 0x00600001, 0x204003be, 0x000000e4, 0x00000000 },
-/*    mov (8) m3<1>F g3<8,8,1>F { align1 +  } */
-   { 0x00600001, 0x206003be, 0x008d0060, 0x00000000 },
-/*    send   0 (8) a0<1>F g0<8,8,1>F urb mlen 4 rlen 0 write +0 transpose used complete EOT{ align1 +  } */
-   { 0x00600031, 0x20001fbc, 0x008d0000, 0x8640c800 },
-/*    nop (4) g0<1>UD { align1 +  } */
-   { 0x0040007e, 0x20000c21, 0x00690000, 0x00000000 },
-/*    nop (4) g0<1>UD { align1 +  } */
-   { 0x0040007e, 0x20000c21, 0x00690000, 0x00000000 },
-/*    nop (4) g0<1>UD { align1 +  } */
-   { 0x0040007e, 0x20000c21, 0x00690000, 0x00000000 },
-/*    nop (4) g0<1>UD { align1 +  } */
-   { 0x0040007e, 0x20000c21, 0x00690000, 0x00000000 },
-/*    nop (4) g0<1>UD { align1 +  } */
-   { 0x0040007e, 0x20000c21, 0x00690000, 0x00000000 },
-/*    nop (4) g0<1>UD { align1 +  } */
-   { 0x0040007e, 0x20000c21, 0x00690000, 0x00000000 },
-/*    nop (4) g0<1>UD { align1 +  } */
-   { 0x0040007e, 0x20000c21, 0x00690000, 0x00000000 },
-/*    nop (4) g0<1>UD { align1 +  } */
-   { 0x0040007e, 0x20000c21, 0x00690000, 0x00000000 },
+#include "sf_prog.h"
 };
 
 /*
@@ -2288,6 +2255,15 @@
     */
    *pI830->used3D |= 1 << 30;
 
+#ifdef XF86DRI
+   /* Tell the DRI that we're smashing its state. */
+   if (pI830->directRenderingEnabled) {
+     drmI830Sarea *pSAREAPriv = DRIGetSAREAPrivate(pScrn->pScreen);
+
+     pSAREAPriv->ctxOwner = DRIGetContext(pScrn->pScreen);
+   }
+#endif /* XF86DRI */
+
    next_offset = 0;
 
    /* Set up our layout of state in framebuffer.  First the general state: */
--- /dev/null	2006-09-11 15:00:37.587577243 -0400
+++ xorg-x11-drv-i810-1.6.5/xf86-video-i810-1.6.5/src/packed_yuv_wm.g4a	2006-09-11 16:44:45.000000000 -0400
@@ -0,0 +1,161 @@
+/* The initial payload of the thread is always g0.
+ * WM_URB (incoming URB entries) is g3
+ * X0_R is g4
+ * X1_R is g5
+ * Y0_R is g6
+ * Y1_R is g7
+ */
+
+    /* Set up the X/Y screen coordinates of the pixels in our 4 subspans.  Each
+     * subspan is a 2x2 rectangle, and the screen x/y of the upper left of each
+     * subspan are given in GRF register 1.2 through 1.5 (which, with the word
+     * addressing below, are 1.4 through 1.11).
+     *
+     * The result is WM_X*_R and WM_Y*R being:
+     *
+     * X0: {ss0.x, ss0.x+1, ss0.x,   ss0.x+1, ss1.x, ss1.x+1, ss1.x,   ss1.x+y}
+     * Y0: {ss0.y, ss0.y,   ss0.y+1, ss0.y+1, ss1.y, ss1.y,   ss1.y+1, ss1.y+1}
+     * X1: {ss2.x, ss2.x+1, ss2.x,   ss2.x+1, ss3.x, ss3.x+1, ss3.x,   ss3.x+y}
+     * Y1: {ss2.y, ss2.y,   ss2.y+1, ss2.y+1, ss3.y, ss3.y,   ss3.y+1, ss3.y+1}
+     */
+
+    /* Set up ss0.x coordinates*/
+mov (1) g4<1>F g1.8<0,1,0>UW { align1 };
+add (1) g4.4<1>F g1.8<0,1,0>UW 1UB { align1 };
+mov (1) g4.8<1>F g1.8<0,1,0>UW { align1 };
+add (1) g4.12<1>F g1.8<0,1,0>UW 1UB { align1 };
+    /* Set up ss0.y coordinates */
+mov (1) g6<1>F g1.10<0,1,0>UW { align1 };
+mov (1) g6.4<1>F g1.10<0,1,0>UW { align1 };
+add (1) g6.8<1>F g1.10<0,1,0>UW 1UB { align1 };
+add (1) g6.12<1>F g1.10<0,1,0>UW 1UB { align1 };
+    /* set up ss1.x coordinates */
+mov (1) g4.16<1>F g1.12<0,1,0>UW { align1 };
+add (1) g4.20<1>F g1.12<0,1,0>UW 1UB { align1 };
+mov (1) g4.24<1>F g1.12<0,1,0>UW { align1 };
+add (1) g4.28<1>F g1.12<0,1,0>UW 1UB { align1 };
+    /* set up ss1.y coordinates */
+mov (1) g6.16<1>F g1.14<0,1,0>UW { align1 };
+mov (1) g6.20<1>F g1.14<0,1,0>UW { align1 };
+add (1) g6.24<1>F g1.14<0,1,0>UW 1UB { align1 };
+add (1) g6.28<1>F g1.14<0,1,0>UW 1UB { align1 };
+    /* Set up ss2.x coordinates */
+mov (1) g5<1>F g1.16<0,1,0>UW { align1 };
+add (1) g5.4<1>F g1.16<0,1,0>UW 1UB { align1 };
+mov (1) g5.8<1>F g1.16<0,1,0>UW { align1 };
+add (1) g5.12<1>F g1.16<0,1,0>UW 1UB { align1 };
+    /* Set up ss2.y coordinates */
+mov (1) g7<1>F g1.18<0,1,0>UW { align1 };
+mov (1) g7.4<1>F g1.18<0,1,0>UW { align1 };
+add (1) g7.8<1>F g1.18<0,1,0>UW 1UB { align1 };
+add (1) g7.12<1>F g1.18<0,1,0>UW 1UB { align1 };
+    /* Set up ss3.x coordinates */
+mov (1) g5.16<1>F g1.20<0,1,0>UW { align1 };
+add (1) g5.20<1>F g1.20<0,1,0>UW 1UB { align1 };
+mov (1) g5.24<1>F g1.20<0,1,0>UW { align1 };
+add (1) g5.28<1>F g1.20<0,1,0>UW 1UB { align1 };
+    /* Set up ss3.y coordinates */
+mov (1) g7.16<1>F g1.22<0,1,0>UW { align1 };
+mov (1) g7.20<1>F g1.22<0,1,0>UW { align1 };
+add (1) g7.24<1>F g1.22<0,1,0>UW 1UB { align1 };
+add (1) g7.28<1>F g1.22<0,1,0>UW 1UB { align1 };
+
+    /* Now, map these screen space coordinates into texture coordinates. */
+    /* subtract screen-space X origin of vertex 0. */
+add (8) g4<1>F g4<8,8,1>F -g1<0,1,0>F { align1 };
+add (8) g5<1>F g5<8,8,1>F -g1<0,1,0>F { align1 };
+    /* scale by texture X increment */
+mul (8) g4<1>F g4<8,8,1>F g3<0,1,0>F { align1 };
+mul (8) g5<1>F g5<8,8,1>F g3<0,1,0>F { align1 };
+    /* add in texture X offset */
+add (8) g4<1>F g4<8,8,1>F g3.12<0,1,0>F { align1 };
+add (8) g5<1>F g5<8,8,1>F g3.12<0,1,0>F { align1 };
+    /* subtract screen-space Y origin of vertex 0. */
+add (8) g6<1>F g6<8,8,1>F -g1.4<0,1,0>F { align1 };
+add (8) g7<1>F g7<8,8,1>F -g1.4<0,1,0>F { align1 };
+    /* scale by texture Y increment */
+mul (8) g6<1>F g6<8,8,1>F g3.20<0,1,0>F { align1 };
+mul (8) g7<1>F g7<8,8,1>F g3.20<0,1,0>F { align1 };
+    /* add in texture Y offset */
+add (8) g6<1>F g6<8,8,1>F g3.28<0,1,0>F { align1 };
+add (8) g7<1>F g7<8,8,1>F g3.28<0,1,0>F { align1 };
+    /* sampler  */
+mov (8) m1<1>F g4<8,8,1>F { align1 };
+mov (8) m2<1>F g5<8,8,1>F { align1 };
+mov (8) m3<1>F g6<8,8,1>F { align1 };
+mov (8) m4<1>F g7<8,8,1>F { align1 };
+
+    /*
+     * g0 holds the PS thread payload, which (oddly) contains
+     * precisely what the sampler wants to see in m0
+     */
+send  (16) 0 g12<1>UW g0<8,8,1>UW sampler (1,0,F) mlen 5 rlen 8 { align1 };
+mov (8) g19<1>UW g19<8,8,1>UW { align1 };
+
+    /* color space conversion function:
+     * R = Clamp ( 1.164(Y-16/255) + 1.596(Cr-128/255), 0, 1)
+     * G = Clamp ( 1.164(Y-16/255) - 0.813(Cr-128/255) - 0.392(Cb-128/255), 0, 1)
+     * B = Clamp ( 1.164(Y-16/255) + 2.017(Cb-128/255), 0, 1)
+     *
+     * Y is g14, g15.
+     * Cr is g12, g13.
+     * Cb is g16, g17.
+     *
+     * R is g2, g6.
+     * G is g3, g7.
+     * B is g4, g8.
+     */
+	/* Y = Y - 16/255 */
+add (8) g14<1>F g14<8,8,1>F -0.0627451F { align1 };
+	/* Cr = Cr - 128/255 */
+add (8) g12<1>F g12<8,8,1>F -0.501961F { align1 };
+	/* Cb = Cb - 128 / 255 */
+add (8) g16<1>F g16<8,8,1>F -0.501961F { align1 };
+	/* Y = Y * 1.164 */
+mul (8) g14<1>F g14<8,8,1>F 1.164F { align1 };
+	/* acc = 1.596 * Cr */
+mul (8) null g12<8,8,1>F 1.596F { align1 };
+	/* R = acc + Y */
+mac.sat (8) m2<1>F g14<8,8,1>F 1F { align1  };
+	/* acc = Cr * -0.813 */
+mul (8) null g12<8,8,1>F -0.813F { align1 };
+	/* acc += Cb * -0.392 */
+mac (8) null g16<8,8,1>F -0.392F { align1 };
+	/* G = acc + Y */
+mac.sat (8) m3<1>F g14<8,8,1>F 1F { align1  };
+	/* acc = Cb * 2.017 */
+mul (8) null g16<8,8,1>F 2.017F { align1 };
+	/* B = acc + Y */
+mac.sat (8) m4<1>F g14<8,8,1>F 1F { align1  };
+ /* and do it again */
+add (8) g15<1>F g15<8,8,1>F -0.0627451F { align1 };
+add (8) g13<1>F g13<8,8,1>F -0.501961F { align1 };
+add (8) g17<1>F g17<8,8,1>F -0.501961F { align1 };
+mul (8) g15<1>F g15<8,8,1>F 1.164F { align1 };
+mul (8) null g13<8,8,1>F 1.596F { align1 };
+mac.sat (8) m6<1>F g15<8,8,1>F 1F { align1  };
+mul (8) null g13<8,8,1>F -0.813F { align1 };
+mac (8) null g17<8,8,1>F -0.392F { align1 };
+mac.sat (8) m7<1>F g15<8,8,1>F 1F { align1  };
+mul (8) null g17<8,8,1>F 2.017F { align1 };
+mac.sat (8) m8<1>F g15<8,8,1>F 1F { align1  };
+
+   /* Pass through control information:
+    */
+mov (8) m1<1>UD g1<8,8,1>UD { align1 mask_disable };
+   /* Send framebuffer write message: XXX: acc0? */
+send (16) 0 null g0<8,8,1>UW write (
+	0, /* binding table index 0 */
+	8, /* pixel scoreboard clear */
+	4, /* render target write */
+	0 /* no write commit message */
+	) mlen 10 rlen 0 { align1 EOT };
+   /* padding */
+nop;
+nop;
+nop;
+nop;
+nop;
+nop;
+nop;
+nop;
--- xorg-x11-drv-i810-1.6.5/xf86-video-i810-1.6.5/src/i830_memory.c.i810-git-20060911	2006-08-08 18:51:25.000000000 -0400
+++ xorg-x11-drv-i810-1.6.5/xf86-video-i810-1.6.5/src/i830_memory.c	2006-09-11 16:44:45.000000000 -0400
@@ -209,17 +209,12 @@
       if (newApStart > newApEnd)
 	 return 0;
 
-      if (flags & NEED_PHYSICAL_ADDR) {
+      if (flags & NEED_PHYSICAL_ADDR) 
 	 result->Key = xf86AllocateGARTMemory(pScrn->scrnIndex, size, 2,
 					      &(result->Physical));
-      } else {
-         /* Due to a bug in agpgart in 2.6 kernels resulting in very poor
-	  * allocation performance we need to workaround it here...
-	  */
-	 result->Key = xf86AllocateGARTMemory(pScrn->scrnIndex, size, 3, NULL);
-         if (result->Key == -1)
-	    result->Key = xf86AllocateGARTMemory(pScrn->scrnIndex, size, 0, NULL);
-      }
+      else 
+	 result->Key = xf86AllocateGARTMemory(pScrn->scrnIndex, size, 0, NULL);
+
       if (result->Key == -1)
 	 return 0;
    }
@@ -788,7 +783,7 @@
       pI830->FbMemBox.x1 = 0;
       pI830->FbMemBox.x2 = pScrn->displayWidth;
       pI830->FbMemBox.y1 = 0;
-      if (pScrn->virtualX > pScrn->virtualY)
+      if (!pI830->MergedFB && pScrn->virtualX > pScrn->virtualY)
          pI830->FbMemBox.y2 = pScrn->virtualX;
       else
          pI830->FbMemBox.y2 = pScrn->virtualY;
@@ -860,7 +855,7 @@
       }
 
 #if 1 /* ROTATION */
-      if (pScrn->virtualX > pScrn->virtualY)
+      if (!pI830->MergedFB && pScrn->virtualX > pScrn->virtualY)
          size = lineSize * (pScrn->virtualX + cacheLines);
       else 
          size = lineSize * (pScrn->virtualY + cacheLines);
@@ -973,13 +968,7 @@
     */
    if (!dryrun) {
       memset(&(pI830->Dummy), 0, sizeof(pI830->Dummy));
-      /* Due to a bug in agpgart in 2.6 kernels resulting in very poor
-       * allocation performance we need to workaround it here...
-       */
-      pI830->Dummy.Key = 
-           xf86AllocateGARTMemory(pScrn->scrnIndex, size, 3, NULL);
-      if (pI830->Dummy.Key == -1)
-         pI830->Dummy.Key = xf86AllocateGARTMemory(pScrn->scrnIndex, size, 0, NULL);
+      pI830->Dummy.Key = xf86AllocateGARTMemory(pScrn->scrnIndex, size, 0, NULL);
       pI830->Dummy.Offset = 0;
    }
 #endif
@@ -1399,14 +1388,7 @@
 
    if (pool->Total.Size > pool->Fixed.Size) {
       pool->Allocated.Size = pool->Total.Size - pool->Fixed.Size;
-      /* Due to a bug in agpgart in 2.6 kernels resulting in very poor
-       * allocation performance we need to workaround it here...
-       */
-      pool->Allocated.Key = 
-           xf86AllocateGARTMemory(pScrn->scrnIndex, pool->Allocated.Size,
-				   3, NULL);
-      if (pool->Allocated.Key == -1)
-         pool->Allocated.Key = xf86AllocateGARTMemory(pScrn->scrnIndex, 
+      pool->Allocated.Key = xf86AllocateGARTMemory(pScrn->scrnIndex, 
 				   pool->Allocated.Size, 0, NULL);
       if (pool->Allocated.Key == -1) {
 	 xf86DrvMsg(pScrn->scrnIndex, X_ERROR, "Pool allocation failed\n");
--- xorg-x11-drv-i810-1.6.5/xf86-video-i810-1.6.5/src/brw_structs.h.i810-git-20060911	2006-08-08 18:51:25.000000000 -0400
+++ xorg-x11-drv-i810-1.6.5/xf86-video-i810-1.6.5/src/brw_structs.h	2006-09-11 16:44:45.000000000 -0400
@@ -32,39 +32,39 @@
  */
 struct header 
 {
-   GLuint length:16; 
-   GLuint opcode:16; 
+   unsigned int length:16; 
+   unsigned int opcode:16; 
 } bits;
 
 
 union header_union
 {
    struct header bits;
-   GLuint dword;
+   unsigned int dword;
 };
 
 struct brw_3d_control
 {   
    struct 
    {
-      GLuint length:8;
-      GLuint notify_enable:1;
-      GLuint pad:3;
-      GLuint wc_flush_enable:1; 
-      GLuint depth_stall_enable:1; 
-      GLuint operation:2; 
-      GLuint opcode:16; 
+      unsigned int length:8;
+      unsigned int notify_enable:1;
+      unsigned int pad:3;
+      unsigned int wc_flush_enable:1; 
+      unsigned int depth_stall_enable:1; 
+      unsigned int operation:2; 
+      unsigned int opcode:16; 
    } header;
    
    struct
    {
-      GLuint pad:2;
-      GLuint dest_addr_type:1; 
-      GLuint dest_addr:29; 
+      unsigned int pad:2;
+      unsigned int dest_addr_type:1; 
+      unsigned int dest_addr:29; 
    } dest;
    
-   GLuint dword2;   
-   GLuint dword3;   
+   unsigned int dword2;   
+   unsigned int dword3;   
 };
 
 
@@ -72,18 +72,18 @@
 {
    struct
    {
-      GLuint length:8; 
-      GLuint pad:2;
-      GLuint topology:5; 
-      GLuint indexed:1; 
-      GLuint opcode:16; 
+      unsigned int length:8; 
+      unsigned int pad:2;
+      unsigned int topology:5; 
+      unsigned int indexed:1; 
+      unsigned int opcode:16; 
    } header;
 
-   GLuint verts_per_instance;  
-   GLuint start_vert_location;  
-   GLuint instance_count;  
-   GLuint start_instance_location;  
-   GLuint base_vert_location;  
+   unsigned int verts_per_instance;  
+   unsigned int start_vert_location;  
+   unsigned int instance_count;  
+   unsigned int start_instance_location;  
+   unsigned int base_vert_location;  
 };
 
 /* These seem to be passed around as function args, so it works out
@@ -96,16 +96,16 @@
 
 struct brw_mi_flush
 {
-   GLuint flags:4;
-   GLuint pad:12;
-   GLuint opcode:16;
+   unsigned int flags:4;
+   unsigned int pad:12;
+   unsigned int opcode:16;
 };
 
 struct brw_vf_statistics
 {
-   GLuint statistics_enable:1;
-   GLuint pad:15;
-   GLuint opcode:16;
+   unsigned int statistics_enable:1;
+   unsigned int pad:15;
+   unsigned int opcode:16;
 };
 
 
@@ -113,18 +113,18 @@
 struct brw_binding_table_pointers
 {
    struct header header;
-   GLuint vs; 
-   GLuint gs; 
-   GLuint clp; 
-   GLuint sf; 
-   GLuint wm; 
+   unsigned int vs; 
+   unsigned int gs; 
+   unsigned int clp; 
+   unsigned int sf; 
+   unsigned int wm; 
 };
 
 
 struct brw_blend_constant_color
 {
    struct header header;
-   GLfloat blend_constant_color[4];  
+   float blend_constant_color[4];  
 };
 
 
@@ -134,50 +134,50 @@
    
    union {
       struct {
-	 GLuint pitch:18; 
-	 GLuint format:3; 
-	 GLuint pad:4;
-	 GLuint depth_offset_disable:1; 
-	 GLuint tile_walk:1; 
-	 GLuint tiled_surface:1; 
-	 GLuint pad2:1;
-	 GLuint surface_type:3; 
+	 unsigned int pitch:18; 
+	 unsigned int format:3; 
+	 unsigned int pad:4;
+	 unsigned int depth_offset_disable:1; 
+	 unsigned int tile_walk:1; 
+	 unsigned int tiled_surface:1; 
+	 unsigned int pad2:1;
+	 unsigned int surface_type:3; 
       } bits;
-      GLuint dword;
+      unsigned int dword;
    } dword1;
    
-   GLuint dword2_base_addr; 
+   unsigned int dword2_base_addr; 
  
    union {
       struct {
-	 GLuint pad:1;
-	 GLuint mipmap_layout:1; 
-	 GLuint lod:4; 
-	 GLuint width:13; 
-	 GLuint height:13; 
+	 unsigned int pad:1;
+	 unsigned int mipmap_layout:1; 
+	 unsigned int lod:4; 
+	 unsigned int width:13; 
+	 unsigned int height:13; 
       } bits;
-      GLuint dword;
+      unsigned int dword;
    } dword3;
 
    union {
       struct {
-	 GLuint pad:12;
-	 GLuint min_array_element:9; 
-	 GLuint depth:11; 
+	 unsigned int pad:12;
+	 unsigned int min_array_element:9; 
+	 unsigned int depth:11; 
       } bits;
-      GLuint dword;
+      unsigned int dword;
    } dword4;
 };
 
 struct brw_drawrect
 {
    struct header header;
-   GLuint xmin:16; 
-   GLuint ymin:16; 
-   GLuint xmax:16; 
-   GLuint ymax:16; 
-   GLuint xorg:16;  
-   GLuint yorg:16;  
+   unsigned int xmin:16; 
+   unsigned int ymin:16; 
+   unsigned int xmax:16; 
+   unsigned int ymax:16; 
+   unsigned int xorg:16;  
+   unsigned int yorg:16;  
 };
 
 
@@ -186,7 +186,7 @@
 struct brw_global_depth_offset_clamp
 {
    struct header header;
-   GLfloat depth_offset_clamp;  
+   float depth_offset_clamp;  
 };
 
 struct brw_indexbuffer
@@ -194,18 +194,18 @@
    union {
       struct
       {
-	 GLuint length:8; 
-	 GLuint index_format:2; 
-	 GLuint cut_index_enable:1; 
-	 GLuint pad:5; 
-	 GLuint opcode:16; 
+	 unsigned int length:8; 
+	 unsigned int index_format:2; 
+	 unsigned int cut_index_enable:1; 
+	 unsigned int pad:5; 
+	 unsigned int opcode:16; 
       } bits;
-      GLuint dword;
+      unsigned int dword;
 
    } header;
 
-   GLuint buffer_start; 
-   GLuint buffer_end; 
+   unsigned int buffer_start; 
+   unsigned int buffer_end; 
 };
 
 
@@ -215,15 +215,15 @@
   
    struct
    {
-      GLuint pattern:16; 
-      GLuint pad:16;
+      unsigned int pattern:16; 
+      unsigned int pad:16;
    } bits0;
    
    struct
    {
-      GLuint repeat_count:9; 
-      GLuint pad:7;
-      GLuint inverse_repeat_count:16; 
+      unsigned int repeat_count:9; 
+      unsigned int pad:7;
+      unsigned int inverse_repeat_count:16; 
    } bits1;
 };
 
@@ -233,40 +233,40 @@
    struct header header;
    
    struct {
-      GLuint pad:5;
-      GLuint offset:27; 
+      unsigned int pad:5;
+      unsigned int offset:27; 
    } vs;
    
    struct
    {
-      GLuint enable:1;
-      GLuint pad:4;
-      GLuint offset:27; 
+      unsigned int enable:1;
+      unsigned int pad:4;
+      unsigned int offset:27; 
    } gs;
    
    struct
    {
-      GLuint enable:1;
-      GLuint pad:4;
-      GLuint offset:27; 
+      unsigned int enable:1;
+      unsigned int pad:4;
+      unsigned int offset:27; 
    } clp;
    
    struct
    {
-      GLuint pad:5;
-      GLuint offset:27; 
+      unsigned int pad:5;
+      unsigned int offset:27; 
    } sf;
 
    struct
    {
-      GLuint pad:5;
-      GLuint offset:27; 
+      unsigned int pad:5;
+      unsigned int offset:27; 
    } wm;
    
    struct
    {
-      GLuint pad:5;
-      GLuint offset:27; /* KW: check me! */
+      unsigned int pad:5;
+      unsigned int offset:27; /* KW: check me! */
    } cc;
 };
 
@@ -276,10 +276,10 @@
    struct header header;
 
    struct {
-      GLuint y_offset:5; 
-      GLuint pad:3;
-      GLuint x_offset:5; 
-      GLuint pad0:19;
+      unsigned int y_offset:5; 
+      unsigned int pad:3;
+      unsigned int x_offset:5; 
+      unsigned int pad0:19;
    } bits0;
 };
 
@@ -288,7 +288,7 @@
 struct brw_polygon_stipple
 {
    struct header header;
-   GLuint stipple[32];
+   unsigned int stipple[32];
 };
 
 
@@ -297,9 +297,9 @@
 {
    struct
    {
-      GLuint pipeline_select:1;   
-      GLuint pad:15;
-      GLuint opcode:16;   
+      unsigned int pipeline_select:1;   
+      unsigned int pad:15;
+      unsigned int opcode:16;   
    } header;
 };
 
@@ -308,26 +308,26 @@
 {
    struct
    {
-      GLuint length:8;
-      GLuint notify_enable:1;
-      GLuint pad:2;
-      GLuint instruction_state_cache_flush_enable:1;
-      GLuint write_cache_flush_enable:1;
-      GLuint depth_stall_enable:1;
-      GLuint post_sync_operation:2;
+      unsigned int length:8;
+      unsigned int notify_enable:1;
+      unsigned int pad:2;
+      unsigned int instruction_state_cache_flush_enable:1;
+      unsigned int write_cache_flush_enable:1;
+      unsigned int depth_stall_enable:1;
+      unsigned int post_sync_operation:2;
 
-      GLuint opcode:16;
+      unsigned int opcode:16;
    } header;
 
    struct
    {
-      GLuint pad:2;
-      GLuint dest_addr_type:1;
-      GLuint dest_addr:29;
+      unsigned int pad:2;
+      unsigned int dest_addr_type:1;
+      unsigned int dest_addr:29;
    } bits1;
 
-   GLuint data0;
-   GLuint data1;
+   unsigned int data0;
+   unsigned int data1;
 };
 
 
@@ -335,31 +335,31 @@
 {
    struct
    {
-      GLuint length:8;   
-      GLuint vs_realloc:1;   
-      GLuint gs_realloc:1;   
-      GLuint clp_realloc:1;   
-      GLuint sf_realloc:1;   
-      GLuint vfe_realloc:1;   
-      GLuint cs_realloc:1;   
-      GLuint pad:2;
-      GLuint opcode:16;   
+      unsigned int length:8;   
+      unsigned int vs_realloc:1;   
+      unsigned int gs_realloc:1;   
+      unsigned int clp_realloc:1;   
+      unsigned int sf_realloc:1;   
+      unsigned int vfe_realloc:1;   
+      unsigned int cs_realloc:1;   
+      unsigned int pad:2;
+      unsigned int opcode:16;   
    } header;
 
    struct
    {
-      GLuint vs_fence:10;  
-      GLuint gs_fence:10;  
-      GLuint clp_fence:10;  
-      GLuint pad:2;
+      unsigned int vs_fence:10;  
+      unsigned int gs_fence:10;  
+      unsigned int clp_fence:10;  
+      unsigned int pad:2;
    } bits0;
 
    struct
    {
-      GLuint sf_fence:10;  
-      GLuint vf_fence:10;  
-      GLuint cs_fence:10;  
-      GLuint pad:2;
+      unsigned int sf_fence:10;  
+      unsigned int vf_fence:10;  
+      unsigned int cs_fence:10;  
+      unsigned int pad:2;
    } bits1;
 };
 
@@ -369,10 +369,10 @@
 
    struct
    {
-      GLuint nr_urb_entries:3;   
-      GLuint pad:1;
-      GLuint urb_entry_size:5;   
-      GLuint pad0:23;
+      unsigned int nr_urb_entries:3;   
+      unsigned int pad:1;
+      unsigned int urb_entry_size:5;   
+      unsigned int pad0:23;
    } bits0;
 };
 
@@ -380,16 +380,16 @@
 {
    struct
    {
-      GLuint length:8;   
-      GLuint valid:1;   
-      GLuint pad:7;
-      GLuint opcode:16;   
+      unsigned int length:8;   
+      unsigned int valid:1;   
+      unsigned int pad:7;
+      unsigned int opcode:16;   
    } header;
 
    struct
    {
-      GLuint buffer_length:6;   
-      GLuint buffer_address:26;  
+      unsigned int buffer_length:6;   
+      unsigned int buffer_address:26;  
    } bits0;
 };
 
@@ -399,37 +399,37 @@
 
    struct
    {
-      GLuint modify_enable:1;
-      GLuint pad:4;
-      GLuint general_state_address:27;  
+      unsigned int modify_enable:1;
+      unsigned int pad:4;
+      unsigned int general_state_address:27;  
    } bits0;
 
    struct
    {
-      GLuint modify_enable:1;
-      GLuint pad:4;
-      GLuint surface_state_address:27;  
+      unsigned int modify_enable:1;
+      unsigned int pad:4;
+      unsigned int surface_state_address:27;  
    } bits1;
 
    struct
    {
-      GLuint modify_enable:1;
-      GLuint pad:4;
-      GLuint indirect_object_state_address:27;  
+      unsigned int modify_enable:1;
+      unsigned int pad:4;
+      unsigned int indirect_object_state_address:27;  
    } bits2;
 
    struct
    {
-      GLuint modify_enable:1;
-      GLuint pad:11;
-      GLuint general_state_upper_bound:20;  
+      unsigned int modify_enable:1;
+      unsigned int pad:11;
+      unsigned int general_state_upper_bound:20;  
    } bits3;
 
    struct
    {
-      GLuint modify_enable:1;
-      GLuint pad:11;
-      GLuint indirect_object_state_upper_bound:20;  
+      unsigned int modify_enable:1;
+      unsigned int pad:11;
+      unsigned int indirect_object_state_upper_bound:20;  
    } bits4;
 };
 
@@ -439,9 +439,9 @@
 
    struct
    {
-      GLuint prefetch_count:3;   
-      GLuint pad:3;
-      GLuint prefetch_pointer:26;  
+      unsigned int prefetch_count:3;   
+      unsigned int pad:3;
+      unsigned int prefetch_pointer:26;  
    } bits0;
 };
 
@@ -451,8 +451,8 @@
 
    struct
    {
-      GLuint pad:4;
-      GLuint system_instruction_pointer:28;  
+      unsigned int pad:4;
+      unsigned int system_instruction_pointer:28;  
    } bits0;
 };
 
@@ -465,48 +465,48 @@
 
 struct thread0
 {
-   GLuint pad0:1;
-   GLuint grf_reg_count:3; 
-   GLuint pad1:2;
-   GLuint kernel_start_pointer:26; 
+   unsigned int pad0:1;
+   unsigned int grf_reg_count:3; 
+   unsigned int pad1:2;
+   unsigned int kernel_start_pointer:26; 
 };
 
 struct thread1
 {
-   GLuint ext_halt_exception_enable:1; 
-   GLuint sw_exception_enable:1; 
-   GLuint mask_stack_exception_enable:1; 
-   GLuint timeout_exception_enable:1; 
-   GLuint illegal_op_exception_enable:1; 
-   GLuint pad0:3;
-   GLuint depth_coef_urb_read_offset:6;	/* WM only */
-   GLuint pad1:2;
-   GLuint floating_point_mode:1; 
-   GLuint thread_priority:1; 
-   GLuint binding_table_entry_count:8; 
-   GLuint pad3:5;
-   GLuint single_program_flow:1; 
+   unsigned int ext_halt_exception_enable:1; 
+   unsigned int sw_exception_enable:1; 
+   unsigned int mask_stack_exception_enable:1; 
+   unsigned int timeout_exception_enable:1; 
+   unsigned int illegal_op_exception_enable:1; 
+   unsigned int pad0:3;
+   unsigned int depth_coef_urb_read_offset:6;	/* WM only */
+   unsigned int pad1:2;
+   unsigned int floating_point_mode:1; 
+   unsigned int thread_priority:1; 
+   unsigned int binding_table_entry_count:8; 
+   unsigned int pad3:5;
+   unsigned int single_program_flow:1; 
 };
 
 struct thread2
 {
-   GLuint per_thread_scratch_space:4; 
-   GLuint pad0:6;
-   GLuint scratch_space_base_pointer:22; 
+   unsigned int per_thread_scratch_space:4; 
+   unsigned int pad0:6;
+   unsigned int scratch_space_base_pointer:22; 
 };
 
    
 struct thread3
 {
-   GLuint dispatch_grf_start_reg:4; 
-   GLuint urb_entry_read_offset:6; 
-   GLuint pad0:1;
-   GLuint urb_entry_read_length:6; 
-   GLuint pad1:1;
-   GLuint const_urb_entry_read_offset:6; 
-   GLuint pad2:1;
-   GLuint const_urb_entry_read_length:6; 
-   GLuint pad3:1;
+   unsigned int dispatch_grf_start_reg:4; 
+   unsigned int urb_entry_read_offset:6; 
+   unsigned int pad0:1;
+   unsigned int urb_entry_read_length:6; 
+   unsigned int pad1:1;
+   unsigned int const_urb_entry_read_offset:6; 
+   unsigned int pad2:1;
+   unsigned int const_urb_entry_read_length:6; 
+   unsigned int pad3:1;
 };
 
 
@@ -520,43 +520,43 @@
 
    struct
    {
-      GLuint pad0:9;
-      GLuint gs_output_stats:1; /* not always */
-      GLuint stats_enable:1; 
-      GLuint nr_urb_entries:7; 
-      GLuint pad1:1;
-      GLuint urb_entry_allocation_size:5; 
-      GLuint pad2:1;
-      GLuint max_threads:6; 	/* may be less */
-      GLuint pad3:1;
+      unsigned int pad0:9;
+      unsigned int gs_output_stats:1; /* not always */
+      unsigned int stats_enable:1; 
+      unsigned int nr_urb_entries:7; 
+      unsigned int pad1:1;
+      unsigned int urb_entry_allocation_size:5; 
+      unsigned int pad2:1;
+      unsigned int max_threads:6; 	/* may be less */
+      unsigned int pad3:1;
    } thread4;   
       
    struct
    {
-      GLuint pad0:13;
-      GLuint clip_mode:3; 
-      GLuint userclip_enable_flags:8; 
-      GLuint userclip_must_clip:1; 
-      GLuint pad1:1;
-      GLuint guard_band_enable:1; 
-      GLuint viewport_z_clip_enable:1; 
-      GLuint viewport_xy_clip_enable:1; 
-      GLuint vertex_position_space:1; 
-      GLuint api_mode:1; 
-      GLuint pad2:1;
+      unsigned int pad0:13;
+      unsigned int clip_mode:3; 
+      unsigned int userclip_enable_flags:8; 
+      unsigned int userclip_must_clip:1; 
+      unsigned int pad1:1;
+      unsigned int guard_band_enable:1; 
+      unsigned int viewport_z_clip_enable:1; 
+      unsigned int viewport_xy_clip_enable:1; 
+      unsigned int vertex_position_space:1; 
+      unsigned int api_mode:1; 
+      unsigned int pad2:1;
    } clip5;
    
    struct
    {
-      GLuint pad0:5;
-      GLuint clipper_viewport_state_ptr:27; 
+      unsigned int pad0:5;
+      unsigned int clipper_viewport_state_ptr:27; 
    } clip6;
 
    
-   GLfloat viewport_xmin;  
-   GLfloat viewport_xmax;  
-   GLfloat viewport_ymin;  
-   GLfloat viewport_ymax;  
+   float viewport_xmin;  
+   float viewport_xmax;  
+   float viewport_ymin;  
+   float viewport_ymax;  
 };
 
 
@@ -565,90 +565,90 @@
 {
    struct
    {
-      GLuint pad0:3;
-      GLuint bf_stencil_pass_depth_pass_op:3; 
-      GLuint bf_stencil_pass_depth_fail_op:3; 
-      GLuint bf_stencil_fail_op:3; 
-      GLuint bf_stencil_func:3; 
-      GLuint bf_stencil_enable:1; 
-      GLuint pad1:2;
-      GLuint stencil_write_enable:1; 
-      GLuint stencil_pass_depth_pass_op:3; 
-      GLuint stencil_pass_depth_fail_op:3; 
-      GLuint stencil_fail_op:3; 
-      GLuint stencil_func:3; 
-      GLuint stencil_enable:1; 
+      unsigned int pad0:3;
+      unsigned int bf_stencil_pass_depth_pass_op:3; 
+      unsigned int bf_stencil_pass_depth_fail_op:3; 
+      unsigned int bf_stencil_fail_op:3; 
+      unsigned int bf_stencil_func:3; 
+      unsigned int bf_stencil_enable:1; 
+      unsigned int pad1:2;
+      unsigned int stencil_write_enable:1; 
+      unsigned int stencil_pass_depth_pass_op:3; 
+      unsigned int stencil_pass_depth_fail_op:3; 
+      unsigned int stencil_fail_op:3; 
+      unsigned int stencil_func:3; 
+      unsigned int stencil_enable:1; 
    } cc0;
 
    
    struct
    {
-      GLuint bf_stencil_ref:8; 
-      GLuint stencil_write_mask:8; 
-      GLuint stencil_test_mask:8; 
-      GLuint stencil_ref:8; 
+      unsigned int bf_stencil_ref:8; 
+      unsigned int stencil_write_mask:8; 
+      unsigned int stencil_test_mask:8; 
+      unsigned int stencil_ref:8; 
    } cc1;
 
    
    struct
    {
-      GLuint logicop_enable:1; 
-      GLuint pad0:10;
-      GLuint depth_write_enable:1; 
-      GLuint depth_test_function:3; 
-      GLuint depth_test:1; 
-      GLuint bf_stencil_write_mask:8; 
-      GLuint bf_stencil_test_mask:8; 
+      unsigned int logicop_enable:1; 
+      unsigned int pad0:10;
+      unsigned int depth_write_enable:1; 
+      unsigned int depth_test_function:3; 
+      unsigned int depth_test:1; 
+      unsigned int bf_stencil_write_mask:8; 
+      unsigned int bf_stencil_test_mask:8; 
    } cc2;
 
    
    struct
    {
-      GLuint pad0:8;
-      GLuint alpha_test_func:3; 
-      GLuint alpha_test:1; 
-      GLuint blend_enable:1; 
-      GLuint ia_blend_enable:1; 
-      GLuint pad1:1;
-      GLuint alpha_test_format:1;
-      GLuint pad2:16;
+      unsigned int pad0:8;
+      unsigned int alpha_test_func:3; 
+      unsigned int alpha_test:1; 
+      unsigned int blend_enable:1; 
+      unsigned int ia_blend_enable:1; 
+      unsigned int pad1:1;
+      unsigned int alpha_test_format:1;
+      unsigned int pad2:16;
    } cc3;
    
    struct
    {
-      GLuint pad0:5; 
-      GLuint cc_viewport_state_offset:27; 
+      unsigned int pad0:5; 
+      unsigned int cc_viewport_state_offset:27; 
    } cc4;
    
    struct
    {
-      GLuint pad0:2;
-      GLuint ia_dest_blend_factor:5; 
-      GLuint ia_src_blend_factor:5; 
-      GLuint ia_blend_function:3; 
-      GLuint statistics_enable:1; 
-      GLuint logicop_func:4; 
-      GLuint pad1:11;
-      GLuint dither_enable:1; 
+      unsigned int pad0:2;
+      unsigned int ia_dest_blend_factor:5; 
+      unsigned int ia_src_blend_factor:5; 
+      unsigned int ia_blend_function:3; 
+      unsigned int statistics_enable:1; 
+      unsigned int logicop_func:4; 
+      unsigned int pad1:11;
+      unsigned int dither_enable:1; 
    } cc5;
 
    struct
    {
-      GLuint clamp_post_alpha_blend:1; 
-      GLuint clamp_pre_alpha_blend:1; 
-      GLuint clamp_range:2; 
-      GLuint pad0:11;
-      GLuint y_dither_offset:2; 
-      GLuint x_dither_offset:2; 
-      GLuint dest_blend_factor:5; 
-      GLuint src_blend_factor:5; 
-      GLuint blend_function:3; 
+      unsigned int clamp_post_alpha_blend:1; 
+      unsigned int clamp_pre_alpha_blend:1; 
+      unsigned int clamp_range:2; 
+      unsigned int pad0:11;
+      unsigned int y_dither_offset:2; 
+      unsigned int x_dither_offset:2; 
+      unsigned int dest_blend_factor:5; 
+      unsigned int src_blend_factor:5; 
+      unsigned int blend_function:3; 
    } cc6;
 
    struct {
       union {
-	 GLfloat f;  
-	 GLubyte ub[4];
+	 float f;  
+	 unsigned char ub[4];
       } alpha_ref;
    } cc7;
 };
@@ -659,18 +659,18 @@
 {
    struct thread0 thread0;
    struct {
-      GLuint pad0:7;
-      GLuint sw_exception_enable:1; 
-      GLuint pad1:3;
-      GLuint mask_stack_exception_enable:1; 
-      GLuint pad2:1;
-      GLuint illegal_op_exception_enable:1; 
-      GLuint pad3:2;
-      GLuint floating_point_mode:1; 
-      GLuint thread_priority:1; 
-      GLuint binding_table_entry_count:8; 
-      GLuint pad4:5;
-      GLuint single_program_flow:1; 
+      unsigned int pad0:7;
+      unsigned int sw_exception_enable:1; 
+      unsigned int pad1:3;
+      unsigned int mask_stack_exception_enable:1; 
+      unsigned int pad2:1;
+      unsigned int illegal_op_exception_enable:1; 
+      unsigned int pad3:2;
+      unsigned int floating_point_mode:1; 
+      unsigned int thread_priority:1; 
+      unsigned int binding_table_entry_count:8; 
+      unsigned int pad4:5;
+      unsigned int single_program_flow:1; 
    } sf1;
    
    struct thread2 thread2;
@@ -678,51 +678,51 @@
 
    struct
    {
-      GLuint pad0:10;
-      GLuint stats_enable:1; 
-      GLuint nr_urb_entries:7; 
-      GLuint pad1:1;
-      GLuint urb_entry_allocation_size:5; 
-      GLuint pad2:1;
-      GLuint max_threads:6; 
-      GLuint pad3:1;
+      unsigned int pad0:10;
+      unsigned int stats_enable:1; 
+      unsigned int nr_urb_entries:7; 
+      unsigned int pad1:1;
+      unsigned int urb_entry_allocation_size:5; 
+      unsigned int pad2:1;
+      unsigned int max_threads:6; 
+      unsigned int pad3:1;
    } thread4;   
 
    struct
    {
-      GLuint front_winding:1; 
-      GLuint viewport_transform:1; 
-      GLuint pad0:3;
-      GLuint sf_viewport_state_offset:27; 
+      unsigned int front_winding:1; 
+      unsigned int viewport_transform:1; 
+      unsigned int pad0:3;
+      unsigned int sf_viewport_state_offset:27; 
    } sf5;
    
    struct
    {
-      GLuint pad0:9;
-      GLuint dest_org_vbias:4; 
-      GLuint dest_org_hbias:4; 
-      GLuint scissor:1; 
-      GLuint disable_2x2_trifilter:1; 
-      GLuint disable_zero_pix_trifilter:1; 
-      GLuint point_rast_rule:2; 
-      GLuint line_endcap_aa_region_width:2; 
-      GLuint line_width:4; 
-      GLuint fast_scissor_disable:1; 
-      GLuint cull_mode:2; 
-      GLuint aa_enable:1; 
+      unsigned int pad0:9;
+      unsigned int dest_org_vbias:4; 
+      unsigned int dest_org_hbias:4; 
+      unsigned int scissor:1; 
+      unsigned int disable_2x2_trifilter:1; 
+      unsigned int disable_zero_pix_trifilter:1; 
+      unsigned int point_rast_rule:2; 
+      unsigned int line_endcap_aa_region_width:2; 
+      unsigned int line_width:4; 
+      unsigned int fast_scissor_disable:1; 
+      unsigned int cull_mode:2; 
+      unsigned int aa_enable:1; 
    } sf6;
 
    struct
    {
-      GLuint point_size:11; 
-      GLuint use_point_size_state:1; 
-      GLuint subpixel_precision:1; 
-      GLuint sprite_point:1; 
-      GLuint pad0:11;
-      GLuint trifan_pv:2; 
-      GLuint linestrip_pv:2; 
-      GLuint tristrip_pv:2; 
-      GLuint line_last_pixel_enable:1; 
+      unsigned int point_size:11; 
+      unsigned int use_point_size_state:1; 
+      unsigned int subpixel_precision:1; 
+      unsigned int sprite_point:1; 
+      unsigned int pad0:11;
+      unsigned int trifan_pv:2; 
+      unsigned int linestrip_pv:2; 
+      unsigned int tristrip_pv:2; 
+      unsigned int line_last_pixel_enable:1; 
    } sf7;
 
 };
@@ -737,30 +737,30 @@
 
    struct
    {
-      GLuint pad0:10;
-      GLuint stats_enable:1; 
-      GLuint nr_urb_entries:7; 
-      GLuint pad1:1;
-      GLuint urb_entry_allocation_size:5; 
-      GLuint pad2:1;
-      GLuint max_threads:1; 
-      GLuint pad3:6;
+      unsigned int pad0:10;
+      unsigned int stats_enable:1; 
+      unsigned int nr_urb_entries:7; 
+      unsigned int pad1:1;
+      unsigned int urb_entry_allocation_size:5; 
+      unsigned int pad2:1;
+      unsigned int max_threads:1; 
+      unsigned int pad3:6;
    } thread4;   
       
    struct
    {
-      GLuint sampler_count:3; 
-      GLuint pad0:2;
-      GLuint sampler_state_pointer:27; 
+      unsigned int sampler_count:3; 
+      unsigned int pad0:2;
+      unsigned int sampler_state_pointer:27; 
    } gs5;
 
    
    struct
    {
-      GLuint max_vp_index:4; 
-      GLuint pad0:26;
-      GLuint reorder_enable:1; 
-      GLuint pad1:1;
+      unsigned int max_vp_index:4; 
+      unsigned int pad0:26;
+      unsigned int reorder_enable:1; 
+      unsigned int pad1:1;
    } gs6;
 };
 
@@ -774,28 +774,28 @@
    
    struct
    {
-      GLuint pad0:10;
-      GLuint stats_enable:1; 
-      GLuint nr_urb_entries:7; 
-      GLuint pad1:1;
-      GLuint urb_entry_allocation_size:5; 
-      GLuint pad2:1;
-      GLuint max_threads:4; 
-      GLuint pad3:3;
+      unsigned int pad0:10;
+      unsigned int stats_enable:1; 
+      unsigned int nr_urb_entries:7; 
+      unsigned int pad1:1;
+      unsigned int urb_entry_allocation_size:5; 
+      unsigned int pad2:1;
+      unsigned int max_threads:4; 
+      unsigned int pad3:3;
    } thread4;   
 
    struct
    {
-      GLuint sampler_count:3; 
-      GLuint pad0:2;
-      GLuint sampler_state_pointer:27; 
+      unsigned int sampler_count:3; 
+      unsigned int pad0:2;
+      unsigned int sampler_state_pointer:27; 
    } vs5;
 
    struct
    {
-      GLuint vs_enable:1; 
-      GLuint vert_cache_disable:1; 
-      GLuint pad0:30;
+      unsigned int vs_enable:1; 
+      unsigned int vert_cache_disable:1; 
+      unsigned int pad0:30;
    } vs6;
 };
 
@@ -808,41 +808,41 @@
    struct thread3 thread3;
    
    struct {
-      GLuint stats_enable:1; 
-      GLuint pad0:1;
-      GLuint sampler_count:3; 
-      GLuint sampler_state_pointer:27; 
+      unsigned int stats_enable:1; 
+      unsigned int pad0:1;
+      unsigned int sampler_count:3; 
+      unsigned int sampler_state_pointer:27; 
    } wm4;
    
    struct
    {
-      GLuint enable_8_pix:1; 
-      GLuint enable_16_pix:1; 
-      GLuint enable_32_pix:1; 
-      GLuint pad0:7;
-      GLuint legacy_global_depth_bias:1; 
-      GLuint line_stipple:1; 
-      GLuint depth_offset:1; 
-      GLuint polygon_stipple:1; 
-      GLuint line_aa_region_width:2; 
-      GLuint line_endcap_aa_region_width:2; 
-      GLuint early_depth_test:1; 
-      GLuint thread_dispatch_enable:1; 
-      GLuint program_uses_depth:1; 
-      GLuint program_computes_depth:1; 
-      GLuint program_uses_killpixel:1; 
-      GLuint legacy_line_rast: 1; 
-      GLuint pad1:1; 
-      GLuint max_threads:6; 
-      GLuint pad2:1;
+      unsigned int enable_8_pix:1; 
+      unsigned int enable_16_pix:1; 
+      unsigned int enable_32_pix:1; 
+      unsigned int pad0:7;
+      unsigned int legacy_global_depth_bias:1; 
+      unsigned int line_stipple:1; 
+      unsigned int depth_offset:1; 
+      unsigned int polygon_stipple:1; 
+      unsigned int line_aa_region_width:2; 
+      unsigned int line_endcap_aa_region_width:2; 
+      unsigned int early_depth_test:1; 
+      unsigned int thread_dispatch_enable:1; 
+      unsigned int program_uses_depth:1; 
+      unsigned int program_computes_depth:1; 
+      unsigned int program_uses_killpixel:1; 
+      unsigned int legacy_line_rast: 1; 
+      unsigned int pad1:1; 
+      unsigned int max_threads:6; 
+      unsigned int pad2:1;
    } wm5;
    
-   GLfloat global_depth_offset_constant;  
-   GLfloat global_depth_offset_scale;   
+   float global_depth_offset_constant;  
+   float global_depth_offset_scale;   
 };
 
 struct brw_sampler_default_color {
-   GLfloat color[4];
+   float color[4];
 };
 
 struct brw_sampler_state
@@ -850,79 +850,79 @@
    
    struct
    {
-      GLuint shadow_function:3; 
-      GLuint lod_bias:11; 
-      GLuint min_filter:3; 
-      GLuint mag_filter:3; 
-      GLuint mip_filter:2; 
-      GLuint base_level:5; 
-      GLuint pad:1;
-      GLuint lod_preclamp:1; 
-      GLuint default_color_mode:1; 
-      GLuint pad0:1;
-      GLuint disable:1; 
+      unsigned int shadow_function:3; 
+      unsigned int lod_bias:11; 
+      unsigned int min_filter:3; 
+      unsigned int mag_filter:3; 
+      unsigned int mip_filter:2; 
+      unsigned int base_level:5; 
+      unsigned int pad:1;
+      unsigned int lod_preclamp:1; 
+      unsigned int default_color_mode:1; 
+      unsigned int pad0:1;
+      unsigned int disable:1; 
    } ss0;
 
    struct
    {
-      GLuint r_wrap_mode:3; 
-      GLuint t_wrap_mode:3; 
-      GLuint s_wrap_mode:3; 
-      GLuint pad:3;
-      GLuint max_lod:10; 
-      GLuint min_lod:10; 
+      unsigned int r_wrap_mode:3; 
+      unsigned int t_wrap_mode:3; 
+      unsigned int s_wrap_mode:3; 
+      unsigned int pad:3;
+      unsigned int max_lod:10; 
+      unsigned int min_lod:10; 
    } ss1;
 
    
    struct
    {
-      GLuint pad:5;
-      GLuint default_color_pointer:27; 
+      unsigned int pad:5;
+      unsigned int default_color_pointer:27; 
    } ss2;
    
    struct
    {
-      GLuint pad:19;
-      GLuint max_aniso:3; 
-      GLuint chroma_key_mode:1; 
-      GLuint chroma_key_index:2; 
-      GLuint chroma_key_enable:1; 
-      GLuint monochrome_filter_width:3; 
-      GLuint monochrome_filter_height:3; 
+      unsigned int pad:19;
+      unsigned int max_aniso:3; 
+      unsigned int chroma_key_mode:1; 
+      unsigned int chroma_key_index:2; 
+      unsigned int chroma_key_enable:1; 
+      unsigned int monochrome_filter_width:3; 
+      unsigned int monochrome_filter_height:3; 
    } ss3;
 };
 
 
 struct brw_clipper_viewport
 {
-   GLfloat xmin;  
-   GLfloat xmax;  
-   GLfloat ymin;  
-   GLfloat ymax;  
+   float xmin;  
+   float xmax;  
+   float ymin;  
+   float ymax;  
 };
 
 struct brw_cc_viewport
 {
-   GLfloat min_depth;  
-   GLfloat max_depth;  
+   float min_depth;  
+   float max_depth;  
 };
 
 struct brw_sf_viewport
 {
    struct {
-      GLfloat m00;  
-      GLfloat m11;  
-      GLfloat m22;  
-      GLfloat m30;  
-      GLfloat m31;  
-      GLfloat m32;  
+      float m00;  
+      float m11;  
+      float m22;  
+      float m30;  
+      float m31;  
+      float m32;  
    } viewport;
 
    struct {
-      GLshort xmin;
-      GLshort ymin;
-      GLshort xmax;
-      GLshort ymax;
+      short xmin;
+      short ymin;
+      short xmax;
+      short ymax;
    } scissor;
 };
 
@@ -931,51 +931,51 @@
 struct brw_surface_state
 {
    struct {
-      GLuint cube_pos_z:1; 
-      GLuint cube_neg_z:1; 
-      GLuint cube_pos_y:1; 
-      GLuint cube_neg_y:1; 
-      GLuint cube_pos_x:1; 
-      GLuint cube_neg_x:1; 
-      GLuint pad:3;
-      GLuint render_cache_read_mode:1;
-      GLuint mipmap_layout_mode:1; 
-      GLuint vert_line_stride_ofs:1; 
-      GLuint vert_line_stride:1; 
-      GLuint color_blend:1; 
-      GLuint writedisable_blue:1; 
-      GLuint writedisable_green:1; 
-      GLuint writedisable_red:1; 
-      GLuint writedisable_alpha:1; 
-      GLuint surface_format:9; 
-      GLuint data_return_format:1; 
-      GLuint pad0:1;
-      GLuint surface_type:3; 
+      unsigned int cube_pos_z:1; 
+      unsigned int cube_neg_z:1; 
+      unsigned int cube_pos_y:1; 
+      unsigned int cube_neg_y:1; 
+      unsigned int cube_pos_x:1; 
+      unsigned int cube_neg_x:1; 
+      unsigned int pad:3;
+      unsigned int render_cache_read_mode:1;
+      unsigned int mipmap_layout_mode:1; 
+      unsigned int vert_line_stride_ofs:1; 
+      unsigned int vert_line_stride:1; 
+      unsigned int color_blend:1; 
+      unsigned int writedisable_blue:1; 
+      unsigned int writedisable_green:1; 
+      unsigned int writedisable_red:1; 
+      unsigned int writedisable_alpha:1; 
+      unsigned int surface_format:9; 
+      unsigned int data_return_format:1; 
+      unsigned int pad0:1;
+      unsigned int surface_type:3; 
    } ss0;
    
    struct {
-      GLuint base_addr;  
+      unsigned int base_addr;  
    } ss1;
    
    struct {
-      GLuint render_target_rotation:2;
-      GLuint mip_count:4; 
-      GLuint width:13; 
-      GLuint height:13; 
+      unsigned int render_target_rotation:2;
+      unsigned int mip_count:4; 
+      unsigned int width:13; 
+      unsigned int height:13; 
    } ss2;
 
    struct {
-      GLuint tile_walk:1; 
-      GLuint tiled_surface:1; 
-      GLuint pad:1; 
-      GLuint pitch:18; 
-      GLuint depth:11; 
+      unsigned int tile_walk:1; 
+      unsigned int tiled_surface:1; 
+      unsigned int pad:1; 
+      unsigned int pitch:18; 
+      unsigned int depth:11; 
    } ss3;
    
    struct {
-      GLuint pad:19;
-      GLuint min_array_elt:9; 
-      GLuint min_lod:4; 
+      unsigned int pad:19;
+      unsigned int min_array_elt:9; 
+      unsigned int min_lod:4; 
    } ss4;
 };
 
@@ -984,16 +984,16 @@
 struct brw_vertex_buffer_state
 {
    struct {
-      GLuint pitch:11; 
-      GLuint pad:15;
-      GLuint access_type:1; 
-      GLuint vb_index:5; 
+      unsigned int pitch:11; 
+      unsigned int pad:15;
+      unsigned int access_type:1; 
+      unsigned int vb_index:5; 
    } vb0;
    
-   GLuint start_addr; 
-   GLuint max_index;   
+   unsigned int start_addr; 
+   unsigned int max_index;   
 #if 1
-   GLuint instance_data_step_rate; /* not included for sequential/random vertices? */
+   unsigned int instance_data_step_rate; /* not included for sequential/random vertices? */
 #endif
 };
 
@@ -1009,22 +1009,22 @@
 {
    struct
    {
-      GLuint src_offset:11; 
-      GLuint pad:5;
-      GLuint src_format:9; 
-      GLuint pad0:1;
-      GLuint valid:1; 
-      GLuint vertex_buffer_index:5; 
+      unsigned int src_offset:11; 
+      unsigned int pad:5;
+      unsigned int src_format:9; 
+      unsigned int pad0:1;
+      unsigned int valid:1; 
+      unsigned int vertex_buffer_index:5; 
    } ve0;
    
    struct
    {
-      GLuint dst_offset:8; 
-      GLuint pad:8;
-      GLuint vfcomponent3:4; 
-      GLuint vfcomponent2:4; 
-      GLuint vfcomponent1:4; 
-      GLuint vfcomponent0:4; 
+      unsigned int dst_offset:8; 
+      unsigned int pad:8;
+      unsigned int vfcomponent3:4; 
+      unsigned int vfcomponent2:4; 
+      unsigned int vfcomponent1:4; 
+      unsigned int vfcomponent0:4; 
    } ve1;
 };
 
@@ -1037,18 +1037,18 @@
 
 
 struct brw_urb_immediate {
-   GLuint opcode:4;
-   GLuint offset:6;
-   GLuint swizzle_control:2; 
-   GLuint pad:1;
-   GLuint allocate:1;
-   GLuint used:1;
-   GLuint complete:1;
-   GLuint response_length:4;
-   GLuint msg_length:4;
-   GLuint msg_target:4;
-   GLuint pad1:3;
-   GLuint end_of_thread:1;
+   unsigned int opcode:4;
+   unsigned int offset:6;
+   unsigned int swizzle_control:2; 
+   unsigned int pad:1;
+   unsigned int allocate:1;
+   unsigned int used:1;
+   unsigned int complete:1;
+   unsigned int response_length:4;
+   unsigned int msg_length:4;
+   unsigned int msg_target:4;
+   unsigned int pad1:3;
+   unsigned int end_of_thread:1;
 };
 
 /* Instruction format for the execution units:
@@ -1058,79 +1058,79 @@
 {
    struct 
    {
-      GLuint opcode:7;
-      GLuint pad:1;
-      GLuint access_mode:1;
-      GLuint mask_control:1;
-      GLuint dependency_control:2;
-      GLuint compression_control:2;
-      GLuint thread_control:2;
-      GLuint predicate_control:4;
-      GLuint predicate_inverse:1;
-      GLuint execution_size:3;
-      GLuint destreg__conditonalmod:4; /* destreg - send, conditionalmod - others */
-      GLuint pad0:2;
-      GLuint debug_control:1;
-      GLuint saturate:1;
+      unsigned int opcode:7;
+      unsigned int pad:1;
+      unsigned int access_mode:1;
+      unsigned int mask_control:1;
+      unsigned int dependency_control:2;
+      unsigned int compression_control:2;
+      unsigned int thread_control:2;
+      unsigned int predicate_control:4;
+      unsigned int predicate_inverse:1;
+      unsigned int execution_size:3;
+      unsigned int destreg__conditonalmod:4; /* destreg - send, conditionalmod - others */
+      unsigned int pad0:2;
+      unsigned int debug_control:1;
+      unsigned int saturate:1;
    } header;
 
    union {
       struct
       {
-	 GLuint dest_reg_file:2;
-	 GLuint dest_reg_type:3;
-	 GLuint src0_reg_file:2;
-	 GLuint src0_reg_type:3;
-	 GLuint src1_reg_file:2;
-	 GLuint src1_reg_type:3;
-	 GLuint pad:1;
-	 GLuint dest_subreg_nr:5;
-	 GLuint dest_reg_nr:8;
-	 GLuint dest_horiz_stride:2;
-	 GLuint dest_address_mode:1;
+	 unsigned int dest_reg_file:2;
+	 unsigned int dest_reg_type:3;
+	 unsigned int src0_reg_file:2;
+	 unsigned int src0_reg_type:3;
+	 unsigned int src1_reg_file:2;
+	 unsigned int src1_reg_type:3;
+	 unsigned int pad:1;
+	 unsigned int dest_subreg_nr:5;
+	 unsigned int dest_reg_nr:8;
+	 unsigned int dest_horiz_stride:2;
+	 unsigned int dest_address_mode:1;
       } da1;
 
       struct
       {
-	 GLuint dest_reg_file:2;
-	 GLuint dest_reg_type:3;
-	 GLuint src0_reg_file:2;
-	 GLuint src0_reg_type:3;
-	 GLuint pad:6;
-	 GLint dest_indirect_offset:10;	/* offset against the deref'd address reg */
-	 GLuint dest_subreg_nr:3; /* subnr for the address reg a0.x */
-	 GLuint dest_horiz_stride:2;
-	 GLuint dest_address_mode:1;
+	 unsigned int dest_reg_file:2;
+	 unsigned int dest_reg_type:3;
+	 unsigned int src0_reg_file:2;
+	 unsigned int src0_reg_type:3;
+	 unsigned int pad:6;
+	 int dest_indirect_offset:10;	/* offset against the deref'd address reg */
+	 unsigned int dest_subreg_nr:3; /* subnr for the address reg a0.x */
+	 unsigned int dest_horiz_stride:2;
+	 unsigned int dest_address_mode:1;
       } ia1;
 
       struct
       {
-	 GLuint dest_reg_file:2;
-	 GLuint dest_reg_type:3;
-	 GLuint src0_reg_file:2;
-	 GLuint src0_reg_type:3;
-	 GLuint src1_reg_file:2;
-	 GLuint src1_reg_type:3;
-	 GLuint pad0:1;
-	 GLuint dest_writemask:4;
-	 GLuint dest_subreg_nr:1;
-	 GLuint dest_reg_nr:8;
-	 GLuint pad1:2;
-	 GLuint dest_address_mode:1;
+	 unsigned int dest_reg_file:2;
+	 unsigned int dest_reg_type:3;
+	 unsigned int src0_reg_file:2;
+	 unsigned int src0_reg_type:3;
+	 unsigned int src1_reg_file:2;
+	 unsigned int src1_reg_type:3;
+	 unsigned int pad0:1;
+	 unsigned int dest_writemask:4;
+	 unsigned int dest_subreg_nr:1;
+	 unsigned int dest_reg_nr:8;
+	 unsigned int pad1:2;
+	 unsigned int dest_address_mode:1;
       } da16;
 
       struct
       {
-	 GLuint dest_reg_file:2;
-	 GLuint dest_reg_type:3;
-	 GLuint src0_reg_file:2;
-	 GLuint src0_reg_type:3;
-	 GLuint pad0:6;
-	 GLuint dest_writemask:4;
-	 GLint dest_indirect_offset:6;
-	 GLuint dest_subreg_nr:3;
-	 GLuint pad1:2;
-	 GLuint dest_address_mode:1;
+	 unsigned int dest_reg_file:2;
+	 unsigned int dest_reg_type:3;
+	 unsigned int src0_reg_file:2;
+	 unsigned int src0_reg_type:3;
+	 unsigned int pad0:6;
+	 unsigned int dest_writemask:4;
+	 int dest_indirect_offset:6;
+	 unsigned int dest_subreg_nr:3;
+	 unsigned int pad1:2;
+	 unsigned int dest_address_mode:1;
       } ia16;
    } bits1;
 
@@ -1138,64 +1138,64 @@
    union {
       struct
       {
-	 GLuint src0_subreg_nr:5;
-	 GLuint src0_reg_nr:8;
-	 GLuint src0_abs:1;
-	 GLuint src0_negate:1;
-	 GLuint src0_address_mode:1;
-	 GLuint src0_horiz_stride:2;
-	 GLuint src0_width:3;
-	 GLuint src0_vert_stride:4;
-	 GLuint flag_reg_nr:1;
-	 GLuint pad:6;
+	 unsigned int src0_subreg_nr:5;
+	 unsigned int src0_reg_nr:8;
+	 unsigned int src0_abs:1;
+	 unsigned int src0_negate:1;
+	 unsigned int src0_address_mode:1;
+	 unsigned int src0_horiz_stride:2;
+	 unsigned int src0_width:3;
+	 unsigned int src0_vert_stride:4;
+	 unsigned int flag_reg_nr:1;
+	 unsigned int pad:6;
       } da1;
 
       struct
       {
-	 GLint src0_indirect_offset:10;
-	 GLuint src0_subreg_nr:3;
-	 GLuint src0_abs:1;
-	 GLuint src0_negate:1;
-	 GLuint src0_address_mode:1;
-	 GLuint src0_horiz_stride:2;
-	 GLuint src0_width:3;
-	 GLuint src0_vert_stride:4;
-	 GLuint flag_reg_nr:1;
-	 GLuint pad:6;	
+	 int src0_indirect_offset:10;
+	 unsigned int src0_subreg_nr:3;
+	 unsigned int src0_abs:1;
+	 unsigned int src0_negate:1;
+	 unsigned int src0_address_mode:1;
+	 unsigned int src0_horiz_stride:2;
+	 unsigned int src0_width:3;
+	 unsigned int src0_vert_stride:4;
+	 unsigned int flag_reg_nr:1;
+	 unsigned int pad:6;	
       } ia1;
 
       struct
       {
-	 GLuint src0_swz_x:2;
-	 GLuint src0_swz_y:2;
-	 GLuint src0_subreg_nr:1;
-	 GLuint src0_reg_nr:8;
-	 GLuint src0_abs:1;
-	 GLuint src0_negate:1;
-	 GLuint src0_address_mode:1;
-	 GLuint src0_swz_z:2;
-	 GLuint src0_swz_w:2;
-	 GLuint pad0:1;
-	 GLuint src0_vert_stride:4;
-	 GLuint flag_reg_nr:1;
-	 GLuint pad1:6;
+	 unsigned int src0_swz_x:2;
+	 unsigned int src0_swz_y:2;
+	 unsigned int src0_subreg_nr:1;
+	 unsigned int src0_reg_nr:8;
+	 unsigned int src0_abs:1;
+	 unsigned int src0_negate:1;
+	 unsigned int src0_address_mode:1;
+	 unsigned int src0_swz_z:2;
+	 unsigned int src0_swz_w:2;
+	 unsigned int pad0:1;
+	 unsigned int src0_vert_stride:4;
+	 unsigned int flag_reg_nr:1;
+	 unsigned int pad1:6;
       } da16;
 
       struct
       {
-	 GLuint src0_swz_x:2;
-	 GLuint src0_swz_y:2;
-	 GLint src0_indirect_offset:6;
-	 GLuint src0_subreg_nr:3;
-	 GLuint src0_abs:1;
-	 GLuint src0_negate:1;
-	 GLuint src0_address_mode:1;
-	 GLuint src0_swz_z:2;
-	 GLuint src0_swz_w:2;
-	 GLuint pad0:1;
-	 GLuint src0_vert_stride:4;
-	 GLuint flag_reg_nr:1;
-	 GLuint pad1:6;
+	 unsigned int src0_swz_x:2;
+	 unsigned int src0_swz_y:2;
+	 int src0_indirect_offset:6;
+	 unsigned int src0_subreg_nr:3;
+	 unsigned int src0_abs:1;
+	 unsigned int src0_negate:1;
+	 unsigned int src0_address_mode:1;
+	 unsigned int src0_swz_z:2;
+	 unsigned int src0_swz_w:2;
+	 unsigned int pad0:1;
+	 unsigned int src0_vert_stride:4;
+	 unsigned int flag_reg_nr:1;
+	 unsigned int pad1:6;
       } ia16;
 
    } bits2;
@@ -1204,135 +1204,135 @@
    {
       struct
       {
-	 GLuint src1_subreg_nr:5;
-	 GLuint src1_reg_nr:8;
-	 GLuint src1_abs:1;
-	 GLuint src1_negate:1;
-	 GLuint pad:1;
-	 GLuint src1_horiz_stride:2;
-	 GLuint src1_width:3;
-	 GLuint src1_vert_stride:4;
-	 GLuint pad0:7;
+	 unsigned int src1_subreg_nr:5;
+	 unsigned int src1_reg_nr:8;
+	 unsigned int src1_abs:1;
+	 unsigned int src1_negate:1;
+	 unsigned int pad:1;
+	 unsigned int src1_horiz_stride:2;
+	 unsigned int src1_width:3;
+	 unsigned int src1_vert_stride:4;
+	 unsigned int pad0:7;
       } da1;
 
       struct
       {
-	 GLuint src1_swz_x:2;
-	 GLuint src1_swz_y:2;
-	 GLuint src1_subreg_nr:1;
-	 GLuint src1_reg_nr:8;
-	 GLuint src1_abs:1;
-	 GLuint src1_negate:1;
-	 GLuint pad0:1;
-	 GLuint src1_swz_z:2;
-	 GLuint src1_swz_w:2;
-	 GLuint pad1:1;
-	 GLuint src1_vert_stride:4;
-	 GLuint pad2:7;
+	 unsigned int src1_swz_x:2;
+	 unsigned int src1_swz_y:2;
+	 unsigned int src1_subreg_nr:1;
+	 unsigned int src1_reg_nr:8;
+	 unsigned int src1_abs:1;
+	 unsigned int src1_negate:1;
+	 unsigned int pad0:1;
+	 unsigned int src1_swz_z:2;
+	 unsigned int src1_swz_w:2;
+	 unsigned int pad1:1;
+	 unsigned int src1_vert_stride:4;
+	 unsigned int pad2:7;
       } da16;
 
       struct
       {
-	 GLint  src1_indirect_offset:10;
-	 GLuint src1_subreg_nr:3;
-	 GLuint src1_abs:1;
-	 GLuint src1_negate:1;
-	 GLuint pad0:1;
-	 GLuint src1_horiz_stride:2;
-	 GLuint src1_width:3;
-	 GLuint src1_vert_stride:4;
-	 GLuint flag_reg_nr:1;
-	 GLuint pad1:6;	
+	 int  src1_indirect_offset:10;
+	 unsigned int src1_subreg_nr:3;
+	 unsigned int src1_abs:1;
+	 unsigned int src1_negate:1;
+	 unsigned int pad0:1;
+	 unsigned int src1_horiz_stride:2;
+	 unsigned int src1_width:3;
+	 unsigned int src1_vert_stride:4;
+	 unsigned int flag_reg_nr:1;
+	 unsigned int pad1:6;	
       } ia1;
 
       struct
       {
-	 GLuint src1_swz_x:2;
-	 GLuint src1_swz_y:2;
-	 GLint  src1_indirect_offset:6;
-	 GLuint src1_subreg_nr:3;
-	 GLuint src1_abs:1;
-	 GLuint src1_negate:1;
-	 GLuint pad0:1;
-	 GLuint src1_swz_z:2;
-	 GLuint src1_swz_w:2;
-	 GLuint pad1:1;
-	 GLuint src1_vert_stride:4;
-	 GLuint flag_reg_nr:1;
-	 GLuint pad2:6;
+	 unsigned int src1_swz_x:2;
+	 unsigned int src1_swz_y:2;
+	 int  src1_indirect_offset:6;
+	 unsigned int src1_subreg_nr:3;
+	 unsigned int src1_abs:1;
+	 unsigned int src1_negate:1;
+	 unsigned int pad0:1;
+	 unsigned int src1_swz_z:2;
+	 unsigned int src1_swz_w:2;
+	 unsigned int pad1:1;
+	 unsigned int src1_vert_stride:4;
+	 unsigned int flag_reg_nr:1;
+	 unsigned int pad2:6;
       } ia16;
 
 
       struct
       {
-	 GLint  jump_count:16;	/* note: signed */
-	 GLuint  pop_count:4;
-	 GLuint  pad0:12;
+	 int  jump_count:16;	/* note: signed */
+	 unsigned int  pop_count:4;
+	 unsigned int  pad0:12;
       } if_else;
 
       struct {
-	 GLuint function:4;
-	 GLuint int_type:1;
-	 GLuint precision:1;
-	 GLuint saturate:1;
-	 GLuint data_type:1;
-	 GLuint pad0:8;
-	 GLuint response_length:4;
-	 GLuint msg_length:4;
-	 GLuint msg_target:4;
-	 GLuint pad1:3;
-	 GLuint end_of_thread:1;
+	 unsigned int function:4;
+	 unsigned int int_type:1;
+	 unsigned int precision:1;
+	 unsigned int saturate:1;
+	 unsigned int data_type:1;
+	 unsigned int pad0:8;
+	 unsigned int response_length:4;
+	 unsigned int msg_length:4;
+	 unsigned int msg_target:4;
+	 unsigned int pad1:3;
+	 unsigned int end_of_thread:1;
       } math;
 
       struct {
-	 GLuint binding_table_index:8;
-	 GLuint sampler:4;
-	 GLuint return_format:2; 
-	 GLuint msg_type:2;   
-	 GLuint response_length:4;
-	 GLuint msg_length:4;
-	 GLuint msg_target:4;
-	 GLuint pad1:3;
-	 GLuint end_of_thread:1;
+	 unsigned int binding_table_index:8;
+	 unsigned int sampler:4;
+	 unsigned int return_format:2; 
+	 unsigned int msg_type:2;   
+	 unsigned int response_length:4;
+	 unsigned int msg_length:4;
+	 unsigned int msg_target:4;
+	 unsigned int pad1:3;
+	 unsigned int end_of_thread:1;
       } sampler;
 
       struct brw_urb_immediate urb;
 
       struct {
-	 GLuint binding_table_index:8;
-	 GLuint msg_control:4;  
-	 GLuint msg_type:2;  
-	 GLuint target_cache:2;    
-	 GLuint response_length:4;
-	 GLuint msg_length:4;
-	 GLuint msg_target:4;
-	 GLuint pad1:3;
-	 GLuint end_of_thread:1;
+	 unsigned int binding_table_index:8;
+	 unsigned int msg_control:4;  
+	 unsigned int msg_type:2;  
+	 unsigned int target_cache:2;    
+	 unsigned int response_length:4;
+	 unsigned int msg_length:4;
+	 unsigned int msg_target:4;
+	 unsigned int pad1:3;
+	 unsigned int end_of_thread:1;
       } dp_read;
 
       struct {
-	 GLuint binding_table_index:8;
-	 GLuint msg_control:3;
-	 GLuint pixel_scoreboard_clear:1;
-	 GLuint msg_type:3;    
-	 GLuint send_commit_msg:1;
-	 GLuint response_length:4;
-	 GLuint msg_length:4;
-	 GLuint msg_target:4;
-	 GLuint pad1:3;
-	 GLuint end_of_thread:1;
+	 unsigned int binding_table_index:8;
+	 unsigned int msg_control:3;
+	 unsigned int pixel_scoreboard_clear:1;
+	 unsigned int msg_type:3;    
+	 unsigned int send_commit_msg:1;
+	 unsigned int response_length:4;
+	 unsigned int msg_length:4;
+	 unsigned int msg_target:4;
+	 unsigned int pad1:3;
+	 unsigned int end_of_thread:1;
       } dp_write;
 
       struct {
-	 GLuint pad:16;
-	 GLuint response_length:4;
-	 GLuint msg_length:4;
-	 GLuint msg_target:4;
-	 GLuint pad1:3;
-	 GLuint end_of_thread:1;
+	 unsigned int pad:16;
+	 unsigned int response_length:4;
+	 unsigned int msg_length:4;
+	 unsigned int msg_target:4;
+	 unsigned int pad1:3;
+	 unsigned int end_of_thread:1;
       } generic;
 
-      GLuint ud;
+      unsigned int ud;
    } bits3;
 };
 
--- /dev/null	2006-09-11 15:00:37.587577243 -0400
+++ xorg-x11-drv-i810-1.6.5/xf86-video-i810-1.6.5/src/packed_yuv_sf.g4a	2006-09-11 16:44:45.000000000 -0400
@@ -0,0 +1,17 @@
+send (1) 0 g6<1>F g1.12<0,1,0>F math inv scalar mlen 1 rlen 1 { align1 };
+send (1) 0 g6.4<1>F g1.20<0,1,0>F math inv scalar mlen 1 rlen 1 { align1 };
+add (8) g7<1>F g4<8,8,1>F -g3<8,8,1>F { align1 };
+mul (1) g7<1>F g7<0,1,0>F g6<0,1,0>F { align1 };
+mul (1) g7.4<1>F g7.4<0,1,0>F g6.4<0,1,0>F { align1 };
+mov (8) m1<1>F g7<0,1,0>F { align1 };
+mov (8) m2<1>F g7.4<0,1,0>F { align1 };
+mov (8) m3<1>F g3<8,8,1>F { align1 };
+send (8) 0 null g0<8,8,1>F urb 0 transpose used complete mlen 4 rlen 0 { align1 EOT };
+nop;
+nop;
+nop;
+nop;
+nop;
+nop;
+nop;
+nop;
--- xorg-x11-drv-i810-1.6.5/xf86-video-i810-1.6.5/src/i810_reg.h.i810-git-20060911	2006-08-09 17:16:35.000000000 -0400
+++ xorg-x11-drv-i810-1.6.5/xf86-video-i810-1.6.5/src/i810_reg.h	2006-09-11 16:44:45.000000000 -0400
@@ -1238,12 +1238,11 @@
    TvIndex,
    DfpIndex,
    LfpIndex,
+   Crt2Index,
    Tv2Index,
    Dfp2Index,
-   UnknownIndex,
-   Unknown2Index,
-   NumDisplayTypes,
-   NumKnownDisplayTypes = UnknownIndex
+   Lfp2Index,
+   NumDisplayTypes
 } DisplayType;
 
 /* What's connected to the pipes (as reported by the BIOS) */
@@ -1252,10 +1251,10 @@
 #define PIPE_TV_ACTIVE			(1 << TvIndex)
 #define PIPE_DFP_ACTIVE			(1 << DfpIndex)
 #define PIPE_LCD_ACTIVE			(1 << LfpIndex)
+#define PIPE_CRT2_ACTIVE		(1 << Crt2Index)
 #define PIPE_TV2_ACTIVE			(1 << Tv2Index)
 #define PIPE_DFP2_ACTIVE		(1 << Dfp2Index)
-#define PIPE_UNKNOWN_ACTIVE		((1 << UnknownIndex) |	\
-					 (1 << Unknown2Index))
+#define PIPE_LCD2_ACTIVE		(1 << Lfp2Index)
 
 #define PIPE_SIZED_DISP_MASK		(PIPE_DFP_ACTIVE |	\
 					 PIPE_LCD_ACTIVE |	\
